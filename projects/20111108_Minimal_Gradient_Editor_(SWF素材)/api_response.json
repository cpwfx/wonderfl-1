{"code":{"thumbnail":"http://wonderfl.net/images/capture/2/2c/2c1a/2c1a167b1a4db168e952e96df4e3d642544eb624_100.jpg?t=1320864306","parent":"zSZV","as3":"package {\n    import flash.display.*;\n    import flash.events.*;\n    import com.bit101.components.*;\n    \n    public class GradientEditorMiniContainer extends Sprite {\n        function GradientEditorMiniContainer() {\n            if (stage) {\n                new GradientEditorMini(this, 10, 10, \"Gradation:\", {color:[0xff8080,0x8080ff],alpha:[1,0.5],ratio:[0,255]});\n                new InputText(this, 8, 443, loaderInfo.url).setSize(450, 16);\n            }\n        }\n        \n        public function getClass() : Class { return GradientEditorMini; }\n        public function getColorChooserExClass() : Class { return ColorChooserEx; }\n    }\n}\n\nimport flash.display.*;\nimport flash.events.*;\nimport flash.filters.*;\nimport flash.geom.*;\nimport com.bit101.components.*;\n\n/**\n * [ GradientEditor ]\n * Copyright yonatan ( http://wonderfl.net/user/yonatan )\n * MIT License ( http://www.opensource.org/licenses/mit-license.php )\n * Downloaded from: http://wonderfl.net/c/zSZV\n */\n/**\n * [ GradientEditorMini ]\n * modified by keim_at_Si ( http://wonderfl.net/user/keim_at_Si )\n */\nclass GradientEditorMini extends Component {\n//-------------------------------------------------- constants\n    public static const PANEL_WIDTH:int = 200;\n    public static const PANEL_HEIGHT:int = 52;\n    public static const BAR_WIDTH:Number = 192;\n    public static const BAR_HEIGHT:Number = 16;\n    public static const RESOLUTION:int = 1024;\n    public static const TOP:String = \"top\";\n    public static const BOTTOM:String = \"bottom\";\n//-------------------------------------------------- variables\n    protected var _gPoints:Array = [];\n    protected var _swatch:Sprite = new Sprite();\n    protected var _colorChooser:ColorChooserEx;\n    protected var _floatPanel:Panel;\n    protected var _alphaTile:AlphaTile;\n    protected var _barControler:Sprite;\n    protected var _barSlider:Sprite;\n    protected var _samples:BitmapData = new BitmapData(RESOLUTION, 1, true);\n    protected var _sampler:Shape = new Shape();\n    protected var _selectedPoint:GradientPoint;\n    protected var _ok:PushButton;\n    protected var _label:Label;\n    protected var _c:Array, _a:Array, _r:Array;\n    protected var _loopCheck:CheckBox;\n    protected var _popupAlign:String;\n    protected var _changeImmediately:Boolean = false;\n    static protected var _gradBox:Matrix = new Matrix();\n//-------------------------------------------------- properties\n    public function get samples() : BitmapData { return _samples; }\n    public function get colorArray() : Array { return _c; }\n    public function get alphaArray() : Array { return _a; }\n    public function get ratioArray() : Array { return _r; }\n    public function get selectedPoint():GradientPoint { return _selectedPoint; };\n    public function set selectedPoint(p:GradientPoint) : void {\n        _selectedPoint = p;\n        for (var i:int=0; i<_gPoints.length; i++) _gPoints[i].isSelected = (_gPoints[i] === _selectedPoint);\n        _colorChooser.value      = _selectedPoint.color;\n        _colorChooser.alphaValue = _selectedPoint.alpha;\n    }\n    public function get changeImmediately() : Boolean { return _changeImmediately; }\n    public function set changeImmediately(b:Boolean) : void { _changeImmediately = b; }\n    public function get alphaEnabled() : Boolean { return _colorChooser.alphaEnabled; }\n    public function set alphaEnabled(b:Boolean) : void { _colorChooser.alphaEnabled = b; }\n    public function get looped() : Boolean { return _loopCheck.selected; }\n    public function set looped(b:Boolean) : void { _loopCheck.selected = b; invalidate(); }\n    public function get popupAlign() : String { return _popupAlign; }\n    public function set popupAlign(align:String) : void { _popupAlign = align; _placeFloatPanel(); }\n    public function get label() : String { return _label.text; }\n    public function set label(txt:String) : void { _label.text = txt; _label.draw(); _swatch.x = _label.width+5; }\n    public function getColor32(r:Number) : uint { return _samples.getPixel32(r * RESOLUTION, 0); }\n//-------------------------------------------------- constructor\n    function GradientEditorMini(parent:DisplayObjectContainer=null, xpos:Number=0, ypos:Number=0, labelText:String=\"\", args:*=null, defaultHandler:Function=null) {\n        var i:int;\n        if (defaultHandler != null) addEventListener(Event.CHANGE, defaultHandler);\n        args = args || {};\n        _c = (\"color\" in args) ? args[\"color\"] : [0, 0xffffff];\n        _a = (\"alpha\" in args) ? args[\"alpha\"] : [1, 1];\n        _r = (\"ratio\" in args) ? args[\"ratio\"] : [0, 255];\n        super(parent, xpos, ypos);\n        setSize(60, 16);\n        label = labelText;\n    }\n    public function initialize(color:Array, alpha:Array, ratio:Array) : void {\n        _c = color;\n        _a = alpha;\n        _r = ratio;\n        _gPoints.length = 0;\n        for(var i:int=0; i<_c.length; i++) _gPoints.push(new GradientPoint(_barControler, _c[i], _a[i], _r[i], _movePoint, _removePoint));\n        invalidate();\n    }\n//-------------------------------------------------- handlers\n    override protected function addChildren() : void {\n        var i:int;\n        _swatch = new Sprite();\n        _swatch.filters = [getShadow(2, true)];\n        _swatch.buttonMode = true;\n        _swatch.addEventListener(MouseEvent.CLICK, _onSwatchClick);\n        addChild(_swatch);\n        _label = new Label(this, 0, 0, \"\");\n        _floatPanel = new Panel(this, (PANEL_WIDTH-BAR_WIDTH)>>1, 16);\n        _floatPanel.setSize(PANEL_WIDTH, PANEL_HEIGHT);\n        _floatPanel.content.addChild(_barControler = new Sprite());\n        _barControler.x = 4;\n        _barControler.y = 8;\n        _barControler.addChild(_alphaTile = new AlphaTile(BAR_WIDTH, BAR_HEIGHT));\n        _barControler.addChild(_barSlider = new Sprite());\n        _floatPanel.visible = false;\n        _barSlider.addEventListener(MouseEvent.CLICK, _onBarClick);\n        _ok = new PushButton(_floatPanel.content, 164, 32, \"OK\", _onOK);\n        _ok.setSize(32, 16);\n        _loopCheck = new CheckBox(_floatPanel.content, 112, 34, \"looped\", _onLooped);\n        _loopCheck.selected = false;\n        initialize(_c, _a, _r);\n        _selectedPoint = _gPoints[0];\n        _colorChooser = new ColorChooserEx(_floatPanel.content, 4, 32, _selectedPoint.color, _onColorChanged);\n        _colorChooser.alphaEnabled = true;\n        _colorChooser.alphaValue = _selectedPoint.alpha;\n        popupAlign = \"bottom\";\n    }\n    override public function draw() : void {\n        super.draw();\n        var i:int, g:Graphics;\n        // update Arrays\n        _c.length = _a.length = _r.length = _gPoints.length + ((looped)?1:0);\n        for (i=0; i<_gPoints.length; i++) {\n            _c[i] = _gPoints[i].color;\n            _a[i] = _gPoints[i].alpha;\n            _r[i] = _gPoints[i].ratio;\n        }\n        if (looped) {\n            _c[i] = _gPoints[0].color;\n            _a[i] = _gPoints[0].alpha;\n            _r[i] = 255;\n        }\n        // update bar graphics\n        g = _barSlider.graphics;\n        _gradBox.createGradientBox(BAR_WIDTH, BAR_HEIGHT, 0, 0, 0);\n        g.clear();\n        g.lineStyle(1, 0);\n        g.beginGradientFill(\"linear\", _c, _a, _r, _gradBox);\n        g.drawRect(0, 0, BAR_WIDTH, BAR_HEIGHT);\n        g.endFill();\n        // update button\n        g = _swatch.graphics;\n        _gradBox.createGradientBox(_width, _height, 0, 0, 0);\n        g.clear();\n        g.beginGradientFill(\"linear\", _c, _a, _r, _gradBox);\n        g.drawRect(0, 0, _width, _height);\n        g.endFill();\n        // update samples\n        g = _sampler.graphics;\n        _gradBox.createGradientBox(RESOLUTION, 1, 0, 0, 0);\n        g.clear();\n        g.beginGradientFill(\"linear\", _c, _a, _r, _gradBox);\n        g.drawRect(0, 0, RESOLUTION, 1);\n        g.endFill();\n        _samples.draw(_sampler);\n        _samples.draw(_sampler, null, null, \"alpha\");\n    }\n    protected function _onBarClick(e:MouseEvent) : void {\n        var r:Number = e.localX / BAR_WIDTH, c32:uint = getColor32(r);\n        _addPoint(new GradientPoint(_barControler, c32&0xffffff, (c32>>>24)/255, r*255, _movePoint, _removePoint));\n    }\n    protected function _onColorChanged(e:Event=null) : void {\n        selectedPoint.color = _colorChooser.value;\n        selectedPoint.alpha = _colorChooser.alphaValue;\n        if (_changeImmediately) dispatchEvent(new Event(Event.CHANGE));\n        invalidate();\n    }\n    protected function _onSwatchClick(e:Event=null) : void { _floatPanel.visible = true; }\n    protected function _onOK(e:Event) : void { _floatPanel.visible = false; dispatchEvent(new Event(Event.CHANGE)); }\n    protected function _placeFloatPanel() : void { _floatPanel.y = (_popupAlign == TOP) ? -PANEL_HEIGHT-4 : 20; }\n    protected function _onLooped(e:Event) : void { \n        if (_changeImmediately) dispatchEvent(new Event(Event.CHANGE)); \n        invalidate(); \n    }\n//-------------------------------------------------- internals\n    protected function _addPoint(p:GradientPoint) : void {\n        _gPoints.push(p);\n        _gPoints.sortOn(\"ratio\", Array.NUMERIC);\n        selectedPoint = p;\n        if (_changeImmediately) dispatchEvent(new Event(Event.CHANGE));\n        invalidate();\n    }\n    protected function _removePoint(p:GradientPoint) : Boolean {\n        if(_gPoints.length < 3) return false; // only if there are more than 2 points\n        _gPoints.splice(_gPoints.indexOf(p), 1);\n        if (_selectedPoint === p) selectedPoint = _gPoints[0];\n        if (_changeImmediately) dispatchEvent(new Event(Event.CHANGE));\n        invalidate();\n        return true;\n    }\n    protected function _movePoint(p:GradientPoint) : void { \n        selectedPoint = p;\n        _gPoints.sortOn(\"ratio\", Array.NUMERIC);\n        if (_changeImmediately) dispatchEvent(new Event(Event.CHANGE));\n        invalidate();\n    }\n}\n\nclass GradientPoint {\n    protected var _ratio:Number;\n    protected var _color:uint;\n    protected var _alpha:Number;\n    protected var _isSelected:Boolean;\n    protected var _changeHandler:Function;\n    protected var _killHandler:Function;\n    protected var _mover:Sprite = new Sprite();\n    protected var _killer:Sprite = new Sprite();\n    protected var _parent:DisplayObjectContainer;\n\n    public function get color():uint { return _color; }\n    public function set color(v:uint):void { _color = v; _updateUI(); }\n    public function get alpha():Number { return _alpha; }\n    public function set alpha(v:Number):void { _alpha = v; _updateUI(); }\n    public function get ratio():Number { return _ratio; }\n    public function set ratio(v:Number):void { _ratio = v; _updateUI(); }\n    public function get isSelected():Boolean { return _isSelected; }\n    public function set isSelected(v:Boolean):void { _isSelected = v; _updateUI(); }\n\n    public function GradientPoint(parent:DisplayObjectContainer, c:uint, a:Number, r:Number, change:Function, kill:Function):void {\n        _ratio = r; _color = c; _alpha = a; _changeHandler = change; _killHandler = kill; _parent = parent;\n        _mover.buttonMode = _killer.buttonMode = true;\n        _parent.addChild(_mover);\n        _parent.addChild(_killer);\n        _mover.y = 0;\n        _killer.y = GradientEditorMini.BAR_HEIGHT;\n        _mover.addEventListener(MouseEvent.MOUSE_DOWN, _onDragStart);\n        _killer.addEventListener(MouseEvent.CLICK, _onKill);\n        _updateUI();\n    }\n\n    protected function _onKill(e:Event):void {\n        if (_killHandler(this)) { // returns false if point count < 3\n            _parent.removeChild(_mover);\n            _parent.removeChild(_killer);\n        }\n    }\n\n    protected function _onDragStart(e:MouseEvent) : void {\n        _parent.stage.addEventListener(MouseEvent.MOUSE_MOVE, _onDragging);\n        _parent.stage.addEventListener(MouseEvent.MOUSE_UP, _onDragEnd);\n        _onDragging(e);\n    }\n    \n    protected function _onDragging(e:MouseEvent) : void {\n        var x:Number = _parent.mouseX < 0 ? 0 : _parent.mouseX;\n        if(_parent.mouseX > GradientEditorMini.BAR_WIDTH) x = GradientEditorMini.BAR_WIDTH;\n        _ratio = x / GradientEditorMini.BAR_WIDTH * 255;\n        _mover.x = _killer.x = x;\n        _changeHandler(this);\n    }\n    \n    protected function _onDragEnd(e:MouseEvent) : void {\n        _onDragging(e);\n        _parent.stage.removeEventListener(MouseEvent.MOUSE_MOVE, _onDragging);\n        _parent.stage.removeEventListener(MouseEvent.MOUSE_UP, _onDragEnd);\n    }\n\n    protected function _updateUI():void {\n        var g:Graphics, lineColor:uint = (((_color>>16)+(_color>>8)+_color)&0xff>128)?0:0xffffff;\n        if (_isSelected) { // bring to front\n            _parent.addChild(_mover); \n            _parent.addChild(_killer);\n        }\n        \n        _mover.x = _killer.x = _ratio / 255 * GradientEditorMini.BAR_WIDTH;\n        \n        g = _mover.graphics;\n        g.clear();\n        g.lineStyle(_isSelected ? 2 : 1, lineColor, 0.75);\n        g.beginFill(_color, _alpha);\n        g.drawCircle(0, 0, _isSelected ? 6 : 4);\n        g.endFill();\n        \n        g = _killer.graphics;\n        g.clear();\n        g.lineStyle(1, lineColor, 0.75);\n        g.beginFill(_color, _alpha);\n        g.drawRect(-4, -4, 9, 9);\n        g.endFill();\n        g.drawPath(Vector.<int>([1,2,1,2]), Vector.<Number>([-4,-4,5,5,-4,5,5,-4]));\n    }\n}\n\n\n\n\n/**\n * [ ColorChooserEx ]\n * Copyright keim_at_Si ( http://wonderfl.net/user/keim_at_Si )\n * MIT License ( http://www.opensource.org/licenses/mit-license.php )\n * Downloaded from: http://wonderfl.net/c/eMzU\n */\n\nfunction hsv2rgb(h:Number, s:Number, v:Number) : uint {\n    var ht:Number=(h-int(h)+int(h<0))*6, hi:int=int(ht), vt:Number=v*255;\n    switch(hi) {\n        case 0: return 0xff000000|(vt<<16)|(int(vt*(1-(1-ht+hi)*s))<<8)|int(vt*(1-s));\n        case 1: return 0xff000000|(vt<<8)|(int(vt*(1-(ht-hi)*s))<<16)|int(vt*(1-s));\n        case 2: return 0xff000000|(vt<<8)|int(vt*(1-(1-ht+hi)*s))|(int(vt*(1-s))<<16);\n        case 3: return 0xff000000|vt|(int(vt*(1-(ht-hi)*s))<<8)|(int(vt*(1-s))<<16);\n        case 4: return 0xff000000|vt|(int(vt*(1-(1-ht+hi)*s))<<16)|(int(vt*(1-s))<<8);\n        case 5: return 0xff000000|(vt<<16)|int(vt*(1-(ht-hi)*s))|(int(vt*(1-s))<<8);\n    }\n    return 0;\n}\n\nfunction rgb2hsv(r:int, g:int, b:int) : uint { // h:12bit,s:10bit,v:8bit\n    var max:int, min:int, sv:int;\n    if (r>g) { if (g>b) {min=b;max=r;} else {min=g;max=(r>b)?r:b;} } \n    else     { if (g<b) {max=b;min=r;} else {max=g;min=(r<b)?r:b;} }\n    if (max == min) return max;\n    sv = (int((max - min) * 1023 / max)<<8) | max;\n    if (b==max) return (int((r-g)*682.6666666666666/(max-min)+2730.6666666666665)<<18)|sv;\n    if (g==max) return (int((b-r)*682.6666666666666/(max-min)+1365.3333333333332)<<18)|sv;\n    if (g>=b) return (int((g-b)*682.6666666666666/(max-min))<<18)|sv;\n    return (int(4096+(g-b)*682.6666666666666/(max-min))<<18)|sv;\n}\n\nclass ColorChooserEx extends ColorChooser {\n//-------------------------------------------------- constants\n    public static const PANEL_WIDTH:int = 160;\n    public static const PANEL_HEIGHT:int = 134;\n    \n//-------------------------------------------------- variables\n    protected var uniqueDefaultModel:Sprite = null;\n    protected var originalDefaultModel:Sprite = null;\n    protected var dummyBackground:Sprite;\n    protected var mainPanel:Panel, tabLine:Shape = new Shape();\n    protected var tabs:Array, models:Array = [];\n    protected var _selectedTab:int = 0;\n    protected var _changeImmediately:Boolean = true;\n    protected var _alphaEnabled:Boolean = false;\n    protected var _alpha:Number = 1;\n    protected var _alphaBar:VColorBar;\n    protected var _alphaMap:BitmapData;\n    protected var _alphaTile:AlphaTile;\n    protected var _alphaValue:InputText;\n    \n//-------------------------------------------------- properties\n    public function get selectedTab() : int { return _selectedTab; }\n    public function set selectedTab(idx:int) : void {\n        _selectedTab = idx;\n        for each (var model:Sprite in models) model.visible = false;\n        models[_selectedTab].visible = true;\n        models[_selectedTab].value = value;\n        tabLine.x = _selectedTab * 40;\n    }\n    public function get changeImmediately() : Boolean { return _changeImmediately; }\n    public function set changeImmediately(b:Boolean) : void { _changeImmediately = b; }\n    public function get alphaEnabled() : Boolean { return _alphaEnabled; }\n    public function set alphaEnabled(b:Boolean) : void { _showAlphaControler(_alphaEnabled = b); }\n    public function get alphaValue() : Number { return (_alphaEnabled) ? _alpha: 1; }\n    public function set alphaValue(n:Number) : void {\n        _alpha = (n>1) ? 1 : (n<0) ? 0 : n;\n        _alphaBar.valueY = _alpha;\n        _alphaValue.text = (int(_alpha*100)).toString();\n    }\n    override public function set value(u:uint) : void {\n        var ua:int = u>>>24;\n        super.value = u & 0xffffff;\n        if (ua > 0) alphaValue = ua/255;\n        if (_alphaEnabled) _updateTextInputAlpha();\n    }\n    \n//-------------------------------------------------- constructor\n    function ColorChooserEx(parent:DisplayObjectContainer = null, xpos:Number = 0, ypos:Number =  0, value:uint = 0xff0000, defaultHandler:Function = null) {\n        super(parent, xpos, ypos, value, defaultHandler);\n        usePopup = true;\n    }\n    \n//-------------------------------------------------- modifications\n    override protected function onColorsRemovedFromStage(e:Event) : void {\n        dummyBackground.removeEventListener(MouseEvent.CLICK, onStageClick);\n    }\n    \n    override protected function onColorsAddedToStage(e:Event) : void {\n        _stage = stage;\n        dummyBackground.graphics.clear();\n        dummyBackground.graphics.beginFill(0, 0);\n        dummyBackground.graphics.drawRect(-_stage.stageWidth, -_stage.stageHeight, _stage.stageWidth*2, _stage.stageHeight*2);\n        dummyBackground.graphics.endFill();\n        dummyBackground.addEventListener(MouseEvent.CLICK, onStageClick);\n        models[_selectedTab].value = value;\n    }\n\n    override protected function onStageClick(e:MouseEvent):void {\n        setColorChoiceEx();\n    }\n    \n    override protected function drawColors(d:DisplayObject) : void {\n        while (_colorsContainer.numChildren) _colorsContainer.removeChildAt(0);\n        _colorsContainer.addChild(d); // currently always (d === _model)\n        placeColors();\n    }\n    \n    override public function set usePopup(b:Boolean):void {\n        _usePopup = b;\n        _swatch.buttonMode = true;\n        _swatch.addEventListener(MouseEvent.CLICK, onSwatchClick);\n        if (!_usePopup) {\n            _swatch.buttonMode = false;\n            _swatch.removeEventListener(MouseEvent.CLICK, onSwatchClick);\n        }\n    }\n    \n    override protected function placeColors():void{\n        var point:Point = new Point(x, y);\n        if (parent) point = parent.localToGlobal(point);\n        switch (_popupAlign) {\n            case TOP : \n            _colorsContainer.x = point.x;\n            _colorsContainer.y = point.y - PANEL_HEIGHT - 4;\n            break;\n            case BOTTOM : \n            _colorsContainer.x = point.x;\n            _colorsContainer.y = point.y + 22;\n            break;\n            default: \n            _colorsContainer.x = point.x;\n            _colorsContainer.y = point.y + 22;\n            break;\n        }\n    }\n    \n    override public function draw() : void {\n        super.draw();\n        if (_alphaEnabled) {\n            _swatch.graphics.clear();\n            _swatch.graphics.beginBitmapFill(_alphaTile.tile)\n            _swatch.graphics.drawRect(0, 0, 16, 16);\n            _swatch.graphics.endFill();\n            _swatch.graphics.beginFill(_value, _alpha);\n            _swatch.graphics.drawRect(0, 0, 16, 16);\n            _swatch.graphics.endFill();\n            _updateAlphaBar();\n        }\n    }\n    \n\n//-------------------------------------------------- for interactive selectors\n    public function browseColorChoiceEx(col:uint, alp:Number=Number.NaN) : void {\n        if (!isNaN(alp)) alphaValue = alp;\n        value = _tmpColorChoice = col;\n        if (_changeImmediately) dispatchEvent(new Event(Event.CHANGE));\n    }\n    //public function backToColorChoiceEx() : void { value = _oldColorChoice; }\n    public function setColorChoiceEx() : void {\n        models[3].memory(_oldColorChoice = value);\n        dispatchEvent(new Event(Event.CHANGE));\n        displayColors();\n    }\n    \n//-------------------------------------------------- alpha selector\n    protected function _showAlphaControler(show:Boolean) : void {\n        mainPanel.setSize(PANEL_WIDTH+((show)?32:0), PANEL_HEIGHT);\n        _swatch.x = (_input.width = (show)?60:45) + 5;\n        _alphaBar.visible = show;\n        _alphaValue.visible = show;\n        _updateAlphaBar();\n        invalidate();\n    }\n    \n    protected function _onAlphaChanged(e:Event) : void {\n        alphaValue = _alphaBar.valueY;\n        _updateTextInputAlpha();\n        invalidate();\n    }\n    \n    protected function _onAlphaEdit(e:Event) : void {\n        alphaValue = Number(_alphaValue.text) * 0.01;\n        _updateTextInputAlpha();\n        invalidate();\n    }\n    \n    protected function _updateAlphaBar() : void {\n        var a:Number, rc:Rectangle = new Rectangle(0,0,12,1), col:uint = _value;\n        for (a=1; rc.y<100; a-=0.01, rc.y+=1) _alphaMap.fillRect(rc, (a*255)<<24|col);\n        _alphaBar.pixels.draw(_alphaTile);\n        _alphaBar.pixels.draw(_alphaMap);\n    }\n    \n    protected function _updateTextInputAlpha() : void {\n        var str:String = (uint((_alpha*255)<<24|_value)).toString(16).toUpperCase();\n        while(str.length < 8) str = \"0\" + str;\n        _input.text = str;\n    }\n    \n//-------------------------------------------------- exchange default model\n    override protected function getDefaultModel() : Sprite {\n        var x_:Number = 0;\n        if (uniqueDefaultModel) return uniqueDefaultModel;\n        originalDefaultModel = super.getDefaultModel();\n        uniqueDefaultModel = new Sprite();\n        dummyBackground = new Sprite();\n        uniqueDefaultModel.addChild(dummyBackground);\n        mainPanel = new Panel(uniqueDefaultModel);\n        mainPanel.setSize(PANEL_WIDTH, PANEL_HEIGHT);\n        tabs   = [newTab(\"Gimp\"), newTab(\"Bars\"), newTab(\"Hue\"), newTab(\"Mem\")];\n        models = [new GimpModel(mainPanel.content, this), \n                  new BarsModel(mainPanel.content, this), \n                  new HueModel(mainPanel.content, this),\n                  new MemoryModel(mainPanel.content, this)];\n        mainPanel.content.addChild(tabLine = new Shape());\n        tabLine.graphics.lineStyle(1, Style.PANEL);\n        tabLine.graphics.moveTo(0,0);\n        tabLine.graphics.lineTo(40,0);\n        tabLine.y = 116;\n        _alphaBar = new VColorBar(mainPanel.content, 168, 8, 12, 100, _onAlphaChanged);\n        _alphaMap = new BitmapData(12, 100, true);\n        _alphaTile = new AlphaTile(12, 100);\n        _alphaValue = new InputText(mainPanel.content, 162, 116, \"100\", _onAlphaEdit);\n        _alphaValue.restrict = \"0123456789\";\n        _alphaValue.setSize(28, 18);\n        selectedTab = 0;\n        return uniqueDefaultModel;\n        function newTab(label:String) : PushButton {\n            var newButton:PushButton = new PushButton(mainPanel.content, x_, 116, label, _onTabClick);\n            newButton.setSize(40, 18);\n            x_ += 40;\n            return newButton;\n        }\n    }\n\n    protected function _onTabClick(e:Event) : void { selectedTab = int((e.target.x + 20) / 40); }\n}\n\nclass ColorChooserExModel extends Sprite {\n    protected static const $$:Number = 0.00392156862745098;\n    protected var _h:Number, _s:Number, _v:Number, _r:uint, _g:uint, _b:uint, _a:uint;\n    protected var _chooser:ColorChooserEx;\n    \n    public function get value() : uint { return (_a<<24)|(_r<<16)|(_g<<8)|_b; }\n    public function set value(v:uint) : void {\n        _a = (v >> 24) & 0xff;\n        _r = (v >> 16) & 0xff;\n        _g = (v >> 8) & 0xff;\n        _b = v & 0xff;\n        _RGBupdated();\n        _setup();\n    }\n    \n    function ColorChooserExModel(parent:DisplayObjectContainer, chooser:ColorChooserEx) {\n        super();\n        parent.addChild(this);\n        visible = false;\n        _chooser = chooser;\n    }\n    \n    protected function _setup() : void {}\n    \n    protected function _HSVupdated() : void {\n        var v:uint = hsv2rgb(_h, _s, _v);\n        _r = (v >> 16) & 0xff;\n        _g = (v >> 8) & 0xff;\n        _b = v & 0xff;\n    }\n    \n    protected function _RGBupdated() : void {\n        var hsv:uint = rgb2hsv(_r, _g, _b);\n        _h = (hsv >> 18) * 0.000244140625;\n        _s = ((hsv >> 8) & 0x3ff) * 0.0009775171065493646;\n        _v = (hsv & 0xff) * 0.00392156862745098;\n    }\n}\n\nclass ControlPad extends Panel {\n    public var backBitmap:Bitmap, pixels:BitmapData;\n    protected var _pointer:Shape, _pointerRange:Rectangle;\n    \n    public function get valueX() : Number { return _pointer.x / _pointerRange.width; }\n    public function set valueX(p:Number) : void { _pointer.x = _pointerRange.width * p; }\n    public function get valueY() : Number { return 1 - _pointer.y / _pointerRange.height; }\n    public function set valueY(p:Number) : void { _pointer.y =  _pointerRange.height * (1-p); }\n    public function valueXY(px:Number, py:Number) : void { \n        _pointer.x = _pointerRange.width * px;\n        _pointer.y = _pointerRange.height * (1-py);\n    }\n    \n    function ControlPad(parent:DisplayObjectContainer, xpos:Number, ypos:Number, width:Number, height:Number, defaultHandler:Function=null) {\n        super(parent, xpos, ypos);\n        setSize(width, height);\n        backBitmap = new Bitmap(pixels = new BitmapData(width, height, false, 0x808080));\n        _pointer = _addPointer();\n        _pointerRange = pixels.rect;\n        _background.addChild(backBitmap);\n        addEventListener(MouseEvent.MOUSE_DOWN, _onDragStart);\n        if (defaultHandler != null) addEventListener(Event.CHANGE, defaultHandler);\n        buttonMode = true;\n    }\n    \n    override public function draw() : void {\n        dispatchEvent(new Event(Component.DRAW));\n        _mask.graphics.clear();\n        _mask.graphics.beginFill(0xff0000);\n        _mask.graphics.drawRect(0, 0, _width, _height);\n        _mask.graphics.endFill();\n    }\n\n    protected function _addPointer() : Shape {\n        var pt:Shape = new Shape();\n        pt.graphics.lineStyle(2, 0, 0.5);\n        pt.graphics.beginFill(0xffffff, 1);\n        pt.graphics.drawCircle(0, 0, 3);\n        pt.graphics.endFill();\n        content.addChild(pt);\n        return pt;\n    }\n    \n    protected function _onDragStart(e:MouseEvent) : void {\n        stage.addEventListener(MouseEvent.MOUSE_MOVE, _onDragging);\n        stage.addEventListener(MouseEvent.MOUSE_UP, _onDragEnd);\n        _onDragging(e);\n    }\n    \n    protected function _onDragging(e:MouseEvent) : void {\n        _pointer.x = mouseX;\n        _pointer.y = mouseY;\n             if (_pointer.x < _pointerRange.left)   _pointer.x = _pointerRange.left;\n        else if (_pointer.x > _pointerRange.right)  _pointer.x = _pointerRange.right;\n             if (_pointer.y < _pointerRange.top)    _pointer.y = _pointerRange.top;\n        else if (_pointer.y > _pointerRange.bottom) _pointer.y = _pointerRange.bottom;\n        dispatchEvent(new Event(Event.CHANGE));\n    }\n    \n    protected function _onDragEnd(e:MouseEvent) : void {\n        _onDragging(e);\n        stage.removeEventListener(MouseEvent.MOUSE_MOVE, _onDragging);\n        stage.removeEventListener(MouseEvent.MOUSE_UP, _onDragEnd);\n    }\n}\n\nclass HueCircle extends ControlPad {\n    protected var circleWidth:Number, circleRadius:Number, triangleSize:Number;\n    protected var dragFunc:Function, _hpointer:Shape, _shadowx2:DropShadowFilter;\n    protected var hCircle:BitmapData, svTriangle:BitmapData;\n    protected var _h:Number=0, _s:Number=0, _v:Number=0;\n    protected var svTriangleDrawMatrix:Matrix = new Matrix(0.5, 0, 0, 0.5);\n    protected var baseMatrix:Matrix = new Matrix(0.8660254037844386, 0, 0.4330127018922193, 0.75, -0.4330127018922193, -0.25);\n    protected var matrix:Matrix, invert:Matrix;\n    \n    public function get sat() : Number { return _s; }\n    public function get val() : Number { return _v; }\n    public function get hue() : Number { return _h; }\n    public function setHSV(h:Number, s:Number, v:Number) : void {\n        _h = h; _s = s; _v = v;\n        _drawSVTriangle();\n        invalidate();\n    }\n    \n    function HueCircle(parent:DisplayObjectContainer, xpos:Number, ypos:Number, radius:Number, cwidth:Number, defaultHandler:Function=null) {\n        super(parent, xpos, ypos, radius*2, radius*2, defaultHandler);\n        filters = null;\n        circleWidth  = cwidth;\n        circleRadius = radius;\n        triangleSize = (radius - cwidth) * 2;\n        hCircle    = new BitmapData(radius*2, radius*2, true, 0);\n        svTriangle = new BitmapData(triangleSize*2, triangleSize*2, true, 0);\n        svTriangleDrawMatrix.translate(cwidth, cwidth);\n        baseMatrix.scale(triangleSize, triangleSize);\n        _shadowx2 = getShadow(4, true);\n        _drawHCircle();\n        _drawSVTriangle();\n        _hpointer = _addPointer();\n    }\n    \n    override public function draw() : void {\n        super.draw();\n        _updateHPointerPosition();\n        _updateSVPointerPosition();\n        pixels.copyPixels(hCircle, hCircle.rect, hCircle.rect.topLeft);\n        pixels.draw(svTriangle, svTriangleDrawMatrix, null, null, null, true);\n    }\n    \n    protected function _drawHCircle() : void {\n        var px:int, py:int, rgb:uint, d:Number, pmax:int = circleRadius * 2, \n            r2:Number = pmax * pmax, w2:Number = triangleSize * triangleSize, \n            temp:BitmapData = new BitmapData(hCircle.width*2, hCircle.height*2, true, 0);\n        for (py=-pmax; py<pmax; py++) for (px=-pmax; px<pmax; px++) {\n            d = px * px + py * py;\n            if (w2<=d && d<=r2) {\n                rgb = hsv2rgb(Math.atan2(px, -py)*0.15915494309189534, 1, 1);\n                temp.setPixel32(px+pmax, py+pmax, 0xff000000|rgb);\n            }\n        }\n        temp.applyFilter(temp, temp.rect, temp.rect.topLeft, _shadowx2);\n        hCircle.fillRect(hCircle.rect, 0xff000000|Style.PANEL);\n        hCircle.draw(temp, new Matrix(0.5,0,0,0.5), null, null, null, true);\n        temp.dispose();\n    }\n    \n    protected function _drawSVTriangle() : void {\n        matrix = baseMatrix.clone();\n        matrix.rotate((_h+0.5)*6.283185307179586);\n        invert = matrix.clone();\n        invert.invert();\n        svTriangle.fillRect(svTriangle.rect, 0);\n        var px:int, py:int, rgb:uint, sx:Number, sy:Number, ss:Number, vv:Number, pmax:int = triangleSize, \n            a:Number = invert.a * 0.5, b:Number = invert.b * 0.5, \n            c:Number = invert.c * 0.5, d:Number = invert.d * 0.5, \n            tx:Number= invert.tx,      ty:Number= invert.ty;\n        for (py=-pmax; py<pmax; py++) for (px=-pmax; px<pmax; px++) {\n            sx = px * a + py * c + tx;\n            sy = px * b + py * d + ty;\n            if (sx+sy<=1 && sx>=0 && sy>=0) {\n                vv = sx + sy;\n                ss = (vv==0) ? 1 : (((sy - sx) / vv + 1) * 0.5);\n                svTriangle.setPixel32(px+pmax, py+pmax, hsv2rgb(_h, ss, vv));\n            }\n        }\n        svTriangle.applyFilter(svTriangle, svTriangle.rect, svTriangle.rect.topLeft, _shadowx2);\n    }\n    \n    override protected function _onDragStart(e:MouseEvent) : void {\n        var dx:Number = mouseX - circleRadius, dy:Number = mouseY - circleRadius,\n            l2:Number = dx*dx + dy*dy, icr:Number = circleRadius - circleWidth;\n        dragFunc = (l2 < icr * icr) ? _updateSVValue : _updateHValue;\n        _onDragging(e);\n        super._onDragStart(e);\n    }\n    \n    protected function _updateHValue(dx:Number, dy:Number) : void {\n        var len:Number = Math.sqrt(dx*dx + dy*dy), il:Number;\n        if (len != 0) {\n            il = (circleRadius - circleWidth * 0.5) / len;\n            _h = Math.atan2(dx, -dy)*0.15915494309189534;\n            if (_h<0) _h += 1;\n            _drawSVTriangle();\n            invalidate();\n        }\n    }\n    \n    protected function _updateHPointerPosition() : void {\n        var radh:Number = (_h + 0.5) * 6.283185307179586;\n        _hpointer.x = -Math.sin(radh) * (circleRadius - circleWidth * 0.5) + circleRadius;\n        _hpointer.y = Math.cos(radh) * (circleRadius - circleWidth * 0.5) + circleRadius;\n    }\n    \n    protected function _updateSVValue(dx:Number, dy:Number) : void {\n        var sx:Number = dx * invert.a + dy * invert.c + invert.tx,\n            sy:Number = dx * invert.b + dy * invert.d + invert.ty;\n        sx = (sx<0) ? 0 : sx;\n        sy = (sy<0) ? 0 : sy;\n        if (sx+sy > 1) { \n            var iss:Number = 1/(sx + sy);\n            sx *= iss;\n            sy *= iss;\n        }\n        _v = sx + sy;\n        _s = (_v==0) ? 1 : (((sy - sx) / _v + 1) * 0.5);\n        _updateSVPointerPosition();\n    }\n    \n    protected function _updateSVPointerPosition() : void {\n        var sy:Number = _v * _s, sx:Number = _v - sy;\n        _pointer.x = sx * matrix.a + sy * matrix.c + matrix.tx + circleRadius;\n        _pointer.y = sx * matrix.b + sy * matrix.d + matrix.ty + circleRadius;\n    }\n    \n    override protected function _onDragging(e:MouseEvent) : void {\n        dragFunc(mouseX - circleRadius, mouseY - circleRadius);\n        dispatchEvent(new Event(Event.CHANGE));\n    }\n}\n\nclass HColorBar extends ControlPad {\n    function HColorBar(parent:DisplayObjectContainer, xpos:Number, ypos:Number, width:Number, height:Number, defaultHandler:Function=null) {\n        super(parent, xpos, ypos, width, height, defaultHandler);\n        _pointerRange = new Rectangle(0, height*0.5, width, 0);\n        _pointer.y = _pointerRange.y;\n    }\n}\n\nclass VColorBar extends ControlPad {\n    function VColorBar(parent:DisplayObjectContainer, xpos:Number, ypos:Number, width:Number, height:Number, defaultHandler:Function=null) {\n        super(parent, xpos, ypos, width, height, defaultHandler);\n        _pointerRange = new Rectangle(width*0.5, 0, 0, height);\n        _pointer.x = _pointerRange.x;\n    }\n}\n\nclass AlphaTile extends Shape {\n    public var tile:BitmapData = new BitmapData(16, 16, false);\n    function AlphaTile(width:int=16, height:int=16, color0:uint=0xffffffff, color1:uint=0xffc0c0c0) {\n        super();\n        tile.fillRect(new Rectangle(0,0,8,8), color0);\n        tile.fillRect(new Rectangle(0,8,8,8), color1);\n        tile.fillRect(new Rectangle(8,0,8,8), color1);\n        tile.fillRect(new Rectangle(8,8,8,8), color0);\n        graphics.beginBitmapFill(tile, new Matrix(1,0,0,1,-((width&7)>>1),-((height&7)>>1)), true, false);\n        graphics.drawRect(0, 0, width, height);\n        graphics.endFill();\n    }\n}\n\nclass GimpModel extends ColorChooserExModel {\n    private var ctrl:ControlPad, bar:VColorBar, tabs:Array, cursor:Shape, _selectedTab:int;\n    \n    public function get selectedTab() : int { return _selectedTab; }\n    public function set selectedTab(idx:int) : void {\n        _selectedTab = idx;\n        cursor.y = _selectedTab * 18 + 4;\n        _setup();\n    }\n    \n    function GimpModel(parent:DisplayObjectContainer, chooser:ColorChooserEx) {\n        var y_:Number = 4, me:Sprite = this;\n        super(parent, chooser);\n        ctrl = new ControlPad(me, 8, 8, 100, 100, _onCtrlChange);\n        bar = new VColorBar(me, 112, 8, 12, 100, _onBarChange);\n        tabs = [newTab(\"H\"), newTab(\"S\"), newTab(\"V\"), newTab(\"R\"), newTab(\"G\"), newTab(\"B\")];\n        addChild(cursor = new Shape());\n        cursor.graphics.beginFill(0x8080ff, 0.25);\n        cursor.graphics.drawRect(0,0,26,18);\n        cursor.graphics.endFill();\n        cursor.x = 130;\n        selectedTab = 0;\n        function newTab(label:String) : PushButton {\n            var newButton:PushButton = new PushButton(me, 130, y_, label, _onTabClick);\n            newButton.setSize(26, 18);\n            y_ += 18;\n            return newButton;\n        }\n    }\n\n    override protected function _setup() : void {\n        _updateColors();\n        _updatePointer();\n    }\n    \n    protected function _onTabClick(e:Event) : void {\n        selectedTab = int((e.target.y + 10) / 20);\n    }\n    \n    protected function _onCtrlChange(e:Event) : void {\n        switch (_selectedTab) {\n        case 0:  _s=ctrl.valueX; _v=ctrl.valueY; _HSVupdated(); break;\n        case 1:  _v=ctrl.valueX; _h=ctrl.valueY; _HSVupdated(); break;\n        case 2:  _h=ctrl.valueX; _s=ctrl.valueY; _HSVupdated(); break;\n        case 3:  _b=ctrl.valueX*255; _g=ctrl.valueY*255; _RGBupdated(); break;\n        case 4:  _r=ctrl.valueX*255; _b=ctrl.valueY*255; _RGBupdated(); break;\n        default: _g=ctrl.valueX*255; _r=ctrl.valueY*255; _RGBupdated(); break;\n        }\n        _updateColors(true, false);\n        _chooser.browseColorChoiceEx(value);\n    }\n    \n    protected function _onBarChange(e:Event) : void {\n        switch (_selectedTab) {\n        case 0:  _h=bar.valueY; _HSVupdated(); break;\n        case 1:  _s=bar.valueY; _HSVupdated(); break;\n        case 2:  _v=bar.valueY; _HSVupdated(); break;\n        case 3:  _r=bar.valueY*255; _RGBupdated(); break;\n        case 4:  _g=bar.valueY*255; _RGBupdated(); break;\n        default: _b=bar.valueY*255; _RGBupdated(); break;\n        }\n        _updateColors(false, true);\n        _chooser.browseColorChoiceEx(value);\n    }\n    \n    protected function _updateColors(b:Boolean=true, c:Boolean=true) : void {\n        var rc:Rectangle = new Rectangle(0,0,12,1), i:int;\n        if (_selectedTab<3) {\n            switch (_selectedTab) {\n            case 0: _drawHSV(b,c); break;\n            case 1: _drawSVH(b,c); break;\n            case 2: _drawVHS(b,c); break;\n            }\n        } else _drawRGB(5-_selectedTab,b,c);\n        for (rc.y=99, i=0; i<100; rc.y--, i++) bar.pixels.fillRect(rc, _bar[i]);\n        ctrl.pixels.fillRect(ctrl.pixels.rect, 0);\n        ctrl.pixels.setVector(ctrl.pixels.rect, _mtx);\n    }\n    \n    protected function _updatePointer() : void {\n        switch (_selectedTab) {\n        case 0:  bar.valueY=_h; ctrl.valueX=_s; ctrl.valueY=_v; break;\n        case 1:  bar.valueY=_s; ctrl.valueX=_v; ctrl.valueY=_h; break;\n        case 2:  bar.valueY=_v; ctrl.valueX=_h; ctrl.valueY=_s; break;\n        case 3:  bar.valueY=_r*$$; ctrl.valueX=_b*$$; ctrl.valueY=_g*$$; break;\n        case 4:  bar.valueY=_g*$$; ctrl.valueX=_r*$$; ctrl.valueY=_b*$$; break;\n        default: bar.valueY=_b*$$; ctrl.valueX=_g*$$; ctrl.valueY=_r*$$; break;\n        }\n    }\n    \n    private var _bar:Vector.<uint> = new Vector.<uint>(100);\n    private var _mtx:Vector.<uint> = new Vector.<uint>(10000);\n    private function _drawHSV(b:Boolean, c:Boolean) : void {\n        var h:Number=_h, s:Number=_s, v:Number=_v, i:int;\n        if (b) for (i=0; i<100; i++) _bar[i] = hsv2rgb(i*0.01, 1, 1);\n        if (c) for (i=0, v=99; v>=0; v--) for (s=0; s<100; s++, i++) _mtx[i] = hsv2rgb(h, s*0.01, v*0.01);\n    }\n    private function _drawSVH(b:Boolean, c:Boolean) : void {\n        var h:Number=_h, s:Number=_s, v:Number=_v, i:int;\n        if (b) for (i=0; i<100; i++) _bar[i] = hsv2rgb(h, i*0.01, i*0.005+0.5);\n        if (c) for (i=0, h=99; h>=0; h--) for (v=0; v<100; v++, i++) _mtx[i] = hsv2rgb(h*0.01, s, v*0.01);\n    }\n    private function _drawVHS(b:Boolean, c:Boolean) : void {\n        var h:Number=_h, s:Number=_s, v:Number=_v, i:int;\n        if (b) for (i=0; i<100; i++) _bar[i] = hsv2rgb(h, 1, i*0.01);\n        if (c) for (i=0, s=99; s>=0; s--) for (h=0; h<100; h++, i++) _mtx[i] = hsv2rgb(h*0.01, s*0.01, v);\n    }\n    private function _drawRGB(rgbIndex:int, b:Boolean, c:Boolean) : void {\n        var shift:int = rgbIndex*8, shiftx:int = [8,16,0][rgbIndex], shifty:int = [16,0,8][rgbIndex],\n            rgb:uint = value, col:int = 0xff000000|rgb&~(0xff<<shift), i:int, x:int, y:int;\n        if (b) for (i=0; i<100; i++) _bar[i] = 0xff000000 | (int(i*2.55)<<shift);\n        if (c) {\n            col = 0xff000000|rgb&~((0xff<<shiftx)|(0xff<<shifty));\n            for (i=0, y=99; y>=0; y--) for (x=0; x<100; x++, i++) _mtx[i] = col | (int(x*2.55)<<shiftx)|(int(y*2.55)<<shifty);\n        }\n    }\n}\n\nclass ColorChooser6Numbers extends ColorChooserExModel {\n    protected var numbers:Array = [], _labelx:Number, _numbery:Number = 5;\n    \n    function ColorChooser6Numbers(parent:DisplayObjectContainer, chooser:ColorChooserEx) { super(parent, chooser); }\n    \n    protected function _createNumbers(labelx:Number) : void {\n        _labelx = labelx;\n        _newNumber(\"H\", _onHSVChange, _onHSVTextChange);\n        _newNumber(\"S\", _onHSVChange, _onHSVTextChange);\n        _newNumber(\"V\", _onHSVChange, _onHSVTextChange);\n        _newNumber(\"R\", _onRGBChange, _onRGBTextChange);\n        _newNumber(\"G\", _onRGBChange, _onRGBTextChange);\n        _newNumber(\"B\", _onRGBChange, _onRGBTextChange);\n    }\n    \n    protected function _newNumber(label:String, onChange:Function, onEdit:Function) : void {\n        var input:InputText = new InputText(this, 128, _numbery, \"0\", onEdit);\n        input.setSize(28, 18);\n        input.restrict = \"0-9\";\n        numbers.push(input);\n        new Label(this, _labelx, _numbery, label);\n        _numbery += 18;\n    }\n    \n    protected function _onHSVChange(e:Event) : void {}\n    protected function _onHSVTextChange(e:Event) : void {\n        _h = Number(numbers[0].text) * 0.002777777777777778;\n        _s = Number(numbers[1].text) * 0.01;\n        _v = Number(numbers[2].text) * 0.01;\n        if (_h<0) _h=0 else if (_h>1) _h=1;\n        if (_s<0) _s=0 else if (_s>1) _s=1;\n        if (_v<0) _v=0 else if (_v>1) _v=1;\n        _updateColors();\n        _updatePointer();\n        _chooser.browseColorChoiceEx(value);\n    }\n    \n    protected function _onRGBChange(e:Event) : void {}\n    protected function _onRGBTextChange(e:Event) : void {\n        _r = int(numbers[3].text);\n        _g = int(numbers[4].text);\n        _b = int(numbers[5].text);\n        if (_r<0) _r=0 else if (_r>255) _r=255;\n        if (_g<0) _g=0 else if (_g>255) _g=255;\n        if (_b<0) _b=0 else if (_b>255) _b=255;\n        _updateColors();\n        _updatePointer();\n        _chooser.browseColorChoiceEx(value);\n    }\n    \n    protected function _updateColors() : void {}\n    protected function _updatePointer() : void {}\n    protected function _updateNumbers() : void {\n        numbers[0].text = String(int(_h*360));\n        numbers[1].text = String(int(_s*100));\n        numbers[2].text = String(int(_v*100));\n        numbers[3].text = String(_r);\n        numbers[4].text = String(_g);\n        numbers[5].text = String(_b);\n    }\n}\n\nclass BarsModel extends ColorChooser6Numbers {\n    protected var bars:Array = [];\n    \n    function BarsModel(parent:DisplayObjectContainer, chooser:ColorChooserEx) {\n        super(parent, chooser);\n        _createNumbers(4);\n    }\n\n    override protected function _newNumber(label:String, onChange:Function, onEdit:Function) : void {\n        bars.push(new HColorBar(this, 20, _numbery+4, 100, 10, onChange));\n        return super._newNumber(label, onChange, onEdit);\n    }\n    \n    override protected function _setup() : void {\n        _updateColors();\n        _updatePointer();\n        _updateNumbers();\n    }\n    \n    override protected function _onHSVChange(e:Event) : void {\n        _h = bars[0].valueX;\n        _s = bars[1].valueX;\n        _v = bars[2].valueX;\n        _HSVupdated();\n        bars[3].valueX = _r * $$;\n        bars[4].valueX = _g * $$;\n        bars[5].valueX = _b * $$;\n        _updateColors();\n        _updateNumbers();\n        _chooser.browseColorChoiceEx(value);\n    }\n    \n    override protected function _onRGBChange(e:Event) : void {\n        _r = bars[3].valueX * 255;\n        _g = bars[4].valueX * 255;\n        _b = bars[5].valueX * 255;\n        _RGBupdated();\n        bars[0].valueX = _h;\n        bars[1].valueX = _s;\n        bars[2].valueX = _v;\n        _updateColors();\n        _updateNumbers();\n        _chooser.browseColorChoiceEx(value);\n    }\n    \n    override protected function _updateColors() : void {\n        var h:Number=_h, s:Number=_s, v:Number=_v, rgb:uint = value, i:int, rc:Rectangle = new Rectangle(0,0,1,10);\n        for (rc.x=0, i=0; i<100; rc.x++, i++) {\n            bars[0].pixels.fillRect(rc, hsv2rgb(i*0.01, s, v));\n            bars[1].pixels.fillRect(rc, hsv2rgb(h, i*0.01, v));\n            bars[2].pixels.fillRect(rc, hsv2rgb(h, s, i*0.01));\n            bars[3].pixels.fillRect(rc, (rgb&0x00ffff)|((i*2.55)<<16));\n            bars[4].pixels.fillRect(rc, (rgb&0xff00ff)|((i*2.55)<<8));\n            bars[5].pixels.fillRect(rc, (rgb&0xffff00)|((i*2.55)<<0));\n        }\n    }\n    \n    override protected function _updatePointer() : void {\n        bars[0].valueX = _h;\n        bars[1].valueX = _s;\n        bars[2].valueX = _v;\n        bars[3].valueX = _r * $$;\n        bars[4].valueX = _g * $$;\n        bars[5].valueX = _b * $$;\n    }\n}\n\nclass HueModel extends ColorChooser6Numbers {\n    protected var circle:HueCircle;\n    \n    function HueModel(parent:DisplayObjectContainer, chooser:ColorChooserEx) {\n        super(parent, chooser);\n        _createNumbers(114);\n        circle = new HueCircle(this, 8, 8, 50, 12, _onHueCircleChanged);\n    }\n    \n    protected function _onHueCircleChanged(e:Event) : void {\n        _h = circle.hue;\n        _s = circle.sat;\n        _v = circle.val;\n        _HSVupdated();\n        _updateNumbers();\n        _chooser.browseColorChoiceEx(value);\n    }\n    \n    override protected function _setup() : void { circle.setHSV(_h, _s, _v); _updateNumbers(); }\n    override protected function _updateColors() : void { circle.setHSV(_h, _s, _v); }\n}\n\nclass MemoryModel extends ColorChooserExModel {\n    protected var colors:Vector.<uint> = new Vector.<uint>(16);\n    protected var pallet:Sprite = new Sprite();\n    \n    function MemoryModel(parent:DisplayObjectContainer, chooser:ColorChooserEx) {\n        super(parent, chooser);\n        addChild(pallet);\n        pallet.filters = [new DropShadowFilter(2, 45, Style.DROPSHADOW, 1, 2, 2, .3, 1, true)];\n        pallet.buttonMode = true;\n        pallet.addEventListener(MouseEvent.CLICK, _onColorSelected);\n    }\n    \n    override protected function _setup() : void {\n        memory(value);\n        _updateColors();\n    }\n    \n    protected function _updateColors() : void { \n        var i:int, g:Graphics = pallet.graphics;\n        g.clear();\n        for (i=0; i<16; i++) {\n            g.beginFill(colors[i]);\n            g.drawRect((i&7)*19+5, (i>>3)*19+5, 16, 16);\n            g.endFill();\n        }\n    }\n    \n    protected function _onColorSelected(e:Event) : void {\n        var idx:int = (int((mouseX - 3) / 19) & 7) + (int((mouseY - 3) / 19) << 3);\n        if (idx>=0 && idx<16) {\n            memory(value);\n            _chooser.browseColorChoiceEx(colors[idx]);\n        }\n    }\n    \n    public function memory(color:uint) : void {\n        var i:int, j:int=15;\n        for (i=0; i<16; i++) if (colors[i] == color) { j = i; break; }\n        for (; j>0; j--) colors[j] = colors[j-1];\n        colors[0] = color;\n        _updateColors();\n    }\n}\n","modified_date":1320864241,"compile_ok":"1","created_date":1320684388,"forked_count":"2","license":"MIT","swf":"http://swf.wonderfl.net/swf/usercode/2/2c/2c1a/2c1a167b1a4db168e952e96df4e3d642544eb624.swf","diff":"606","user":{"icon":"http://wonderfl.net/images/icon/2/27/278a/278afc585a0a283d6e1f13f081cfd9c377ab9db2m","name":"keim_at_Si"},"title":"Minimal Gradient Editor (SWF素材)","id":"6i8T","favorite_count":"15"},"stat":"ok"}