{"code":{"thumbnail":"http://wonderfl.net/images/capture/d/d7/d70b/d70b4c18c207dce66627f3761eaf43e0984b3c58_100.jpg?t=1443205612","parent":null,"as3":"package {\n    import flash.events.*;\n    import flash.display.*;\n    import flash.text.*;\n    import com.bit101.components.*;\n    \n    public class FlashTest extends Sprite {\n        private var YAWA:*, userID:String;\n        \n        private var tf:TextField;\n        private var currentText:String;\n        private var codes:Array;\n        private var codeCount:int, cachedCodeCount:int;\n        private var favorited:int, forked:int, totalPV:int, totalLines:int, diff1:int;\n        private var finishAnalysisCount:int;\n        \n        public function FlashTest() {\n            userID = loaderInfo.parameters[\"viewer.displayName\"];\n            useYAWA(setup);\n        }\n        \n        \n        private function setup(api:*) : void {\n            YAWA = api;\n            \n            new InputText(this, 0, 0, userID, function(e:Event) : void { userID = e.target.text; });\n            new PushButton(this, 360, 0, \"Analyze\", function(e:Event) : void { start(); });\n            tf = new TextField();\n            tf.y = 20;\n            tf.width = stage.stageWidth;\n            tf.height = stage.stageHeight - tf.y;\n            tf.multiline = true;\n            tf.wordWrap = true;\n            tf.defaultTextFormat = new TextFormat(\"_sans\", 12);\n            addChild(tf);\n        }\n        \n        \n        private function start() : void {\n            currentText = \"\";\n            YAWA.requestUserInfo(responseCodeListFirst, userID, YAWA.USER_INFO_CODE, 1);\n        }\n            \n        \n        private function responseCodeListFirst(data:*) : void {\n            codeCount = data.codes_count;\n            print(\"user : \" + userID);\n            print(\"posted codes : \" + String(codeCount));\n            var p:int, pageMax:int = data.codes_pages;\n            for (p=1; p<pageMax; p++) YAWA.requestUserInfo(responseCodeList, userID, YAWA.USER_INFO_CODE, p+1);\n        }\n        \n        \n        private function responseCodeList(data:*) : void {\n            print$(\"get code list ... (\" + String(data.cached_codes_count) + \"/\" + String(codeCount) + \")\");\n            if (data.cached_codes_count == codeCount) {\n                codes = data.codes;\n                totalLines = totalPV = forked = favorited = 0;\n                var tagsHash:* = {}, tags:Array = [];\n                cachedCodeCount = 0;\n                for (var i:int=0; i<codes.length; i++) {\n                    favorited  += codes[i].favorited_count;\n                    forked     += codes[i].forked_count;\n                    totalPV    += codes[i].pv;\n                    totalLines += codes[i].lines;\n                    for each (var tag:String in codes[i].tags) {\n                        if (!(tag in tagsHash)) tags.push(tagsHash[tag] = new TagInfo(tag));\n                        else tagsHash[tag].count++;\n                    }\n                    YAWA.requestCodeInfo(responseCode, codes[i].id, \"\", 1);\n                }\n                print(\"forked : \" + String(forked));\n                print(\"favorited : \" + String(favorited));\n                print(\"total pv : \" + String(totalPV));\n                print(\"total lines :\" + String(totalLines));\n                tags.sort(TagInfo.sorter);\n                print(\"[tags]\");\n                print(tags.splice(0,32).join(\", \"));\n            }\n        }\n        \n        \n        private function responseCode(data:*) : void {\n            var p:int, i:int, data:*, key:String, \n                libList:*,     libsHash:*={}, libs:Array=[], \n                fanList:Array, fansHash:*={}, fans:Array=[];\n            print$(\"get code ... (\" + String(++cachedCodeCount) + \"/\" + String(codeCount) + \") [\" + data.title + \"]\");\n            if (cachedCodeCount == codeCount) {\n                finishAnalysisCount = 0;\n                diff1 = 0;\n                for (i=0; i<codes.length; i++) {\n                    data = YAWA.getCodeInfoCache(codes[i].id);\n                    if (data) {\n                        libList = YAWA.analyzeLibraries(data.as3);\n                        for (key in libList) {\n                            if (!(key in libsHash)) libs.push(libsHash[key] = new TagInfo(key));\n                            else libsHash[key].count++;\n                        }\n                        fanList = data.favorited;\n                        for (p=0; p<fanList.length; p++) {\n                            key = fanList[p].name;\n                            if (!(key in fansHash)) fans.push(fansHash[key] = new TagInfo(key));\n                            else fansHash[key].count++;\n                        }\n                        responseFork(data);\n                        for (p=1; p<data.forked_pages; p++) {\n                            YAWA.requestCodeInfo(responseFork, codes[i].id, \"\", p+1);\n                        }\n                    } else {\n                        print(\"error on \" + codes[i].id);\n                    }\n                }\n                libs.sort(TagInfo.sorter);\n                fans.sort(TagInfo.sorter);\n                print(\"[libs]\");\n                print(libs.join(\", \"));\n                print(\"[fans]\");\n                print(fans.splice(0,32).join(\", \"));\n                print$(\"forked code analysis finished : \" + String(finishAnalysisCount) + \"/\" + String(codeCount));\n            }\n        }\n        \n        private function responseFork(data:*) : void {\n            var i:int, imax:int, forked:Array;\n            if (data.cached_forked_count >= data.forked_count) {\n                finishAnalysisCount++;\n                print$(\"forked code analysis finished : \" + String(finishAnalysisCount) + \"/\" + String(codeCount));\n                if (data.forked) {\n                    forked = data.forked;\n                    for (i=0; i<forked.length; i++) {\n                        if (forked[i].diff == 1) diff1 += forked[i].favorited_count;\n                    }\n                }\n                if (finishAnalysisCount == codeCount) {\n                    print(\"\\ndiff:1 codes forked from \" + userID + \"'s code get favs : \" + diff1);\n                }\n            }\n        }\n        \n        \n        private function print$(str:String) : void { tf.text = currentText + str; }\n        private function print (str:String) : void { tf.text = (currentText += str + \"\\n\"); }\n    }\n}\n\n\n\n\nimport flash.net.*;\nimport flash.events.*;\nimport flash.display.*;\n\nfunction useYAWA(onReady:Function, swfurl:String=\"http://swf.wonderfl.net/swf/usercode/8/8f/8f46/8f46608d59b94c39bf42b94a89c1819f9e3bce61.swf\") : void {\n    var loader:Loader = new Loader();\n    loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(e:Event) : void { onReady(e.target.content); });\n    loader.load(new URLRequest(swfurl + \"?t=\" + String(int(new Date().time))));\n}\n\nclass TagInfo {\n    public var tag:String;\n    public var count:int;\n    function TagInfo(tag:String) {\n        this.tag = tag;\n        this.count = 1;\n    }\n    public function toString() : String { return tag + \":\" + count; }\n    static public function sorter(a:TagInfo, b:TagInfo) : Number { return b.count - a.count; }\n}\n","modified_date":1317395290,"compile_ok":"1","created_date":1317326160,"forked_count":"0","license":"MIT","swf":"http://swf.wonderfl.net/swf/usercode/d/d7/d70b/d70b4c18c207dce66627f3761eaf43e0984b3c58.swf","diff":"0","user":{"icon":"http://wonderfl.net/images/icon/2/27/278a/278afc585a0a283d6e1f13f081cfd9c377ab9db2m","name":"keim_at_Si"},"title":"Wonderfl user information analyzer (YAWA test)","id":"uGmR","favorite_count":"4"},"stat":"ok"}