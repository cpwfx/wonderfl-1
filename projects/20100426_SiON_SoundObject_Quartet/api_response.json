{"code":{"thumbnail":"http://wonderfl.net/images/capture/4/45/45ce/45ce618d05cf01a9388abb7c231975ee9684d9d7_100.jpg?t=1443203761","parent":null,"as3":"// SiON ver0.6x's new concept \"SoundObject\"\npackage {\n    import flash.display.*;\n    import flash.events.*;\n    import org.si.sion.*;\n    import org.si.sion.utils.*;\n    import org.si.sion.events.*;\n    import org.si.sion.effector.*;\n    import org.si.sound.*;\n    import org.si.sound.patterns.*;\n    import org.si.sound.synthesizers.*;\n    import com.bit101.components.*;\n    \n    \n    public class main extends Sprite {\n        \n        // SiON SoundObjects (in org.si.sound.*)\n        //----------------------------------------\n        // SoundObjects are SiON-based software instruments which brings an operational feeling of DisplayObject.\n        // SoundObject は，DisplayObject のような感覚で操作を行える SiON を音源として使用したソフトウェア楽器です．\n        public var Ar:Arpeggiator;\n        public var Bs:BassSequencer;\n        public var Cp:ChordPad;\n        public var Dm:DrumMachine;\n        \n        \n        // Synthesizers (in org.si.sound.synthesizers.*)\n        //----------------------------------------\n        // Synthesizers are wrapper classes of SiONVoice.\n        // Synthesizer は SiONVoice のラッパークラスです．\n        // This provides more direct, easier controls of SiON's voice.\n        // より直感的で簡単な SiONVoice の操作を提供します．\n        public var waveTableSynth:WaveTableSynth;\n        public var analogSynth:AnalogSynth;\n        public var padVoiceLoader:PresetVoiceLoader;\n        \n        \n        // Effectors (in org.si.sion.effector.*)\n        //----------------------------------------\n        // Effectors are from SiON's effector package. \n        // Effector は SiON の effector package を使用します．\n        // SoundObject.effectors property or SiDriver.effector.slot* property has a similar operation of \"DisplayObject.filters\".\n        // SoundObject.effectors プロパティ や SiDriver.effector.slot* は DisplayObject.filters と似たような操作を行えます．\n        public var equaliser:SiEffectEqualiser;\n        public var delay:SiEffectStereoDelay;\n        public var chorus:SiEffectStereoChorus;\n        public var autopan:SiEffectAutoPan;\n\n        \n        // SiONDriver\n        //----------------------------------------\n        // Even using SoundObject, you have to create new SiONDriver and call play() method.\n        // SoundObject を使用する場合でも，SiONDriver を生成して play() メソッドを呼び出す必要があります．\n        public var driver:SiONDriver;\n        \n        \n        // constructor\n        function main() {\n            _generalSettings();\n            \n            \n            // create new SiON objects\n            //----------------------------------------\n            // In current version(0.60), you have to create new effectors after SiONDriver creation.\n            // 現バージョン(0.60)では，SiONDriver を生成後にエフェクタを生成する必要があります．\n            driver = new SiONDriver();\n            equaliser = new SiEffectEqualiser();\n            delay  = new SiEffectStereoDelay(300, 0.25, true, 1);\n            chorus = new SiEffectStereoChorus(20, 0.2, 4, 20, 1);\n            autopan = new SiEffectAutoPan();\n            \n            \n            // SiONDriver\n            //----------------------------------------\n            // Set up general parameters (BPM, effect and so on) by SiONDriver's property.\n            // BPM やグローバルエフェクトなど全体に関する操作は SiONDriver のプロパティで行います．\n            driver.autoStop = true;              // set auto stop after fade out\n            driver.bpm = 132;                    // BPM = 132\n            driver.effector.slot0 = [equaliser]; // The equaliser is applied to slot0 (master effector)\n            driver.effector.slot1 = [delay];     // The delay effector is applied to slot1 (global effector)\n            driver.effector.slot2 = [chorus];    // The chorus effector is applied to slot2 (global effector)\n            driver.addEventListener(SiONTrackEvent.BEAT, _onBeat);           // handler for each beat\n            driver.addEventListener(SiONEvent.STREAM_START, _onStartStream); // handler when streaming starts\n            driver.addEventListener(SiONEvent.STREAM_STOP,  _onStopStream);  // handler when streaming stopped\n            new GlobalPanel(this);\n            \n            \n            // Arpeggiator\n            //----------------------------------------\n            // The Arpeggiator is a monophonic sequencer plays arpeggio pattern specifyed by int Array.\n            // Arpeggiator は，int 型 Array で指定したアルペジオパターンを演奏する単音シーケンサです．\n            Ar = new Arpeggiator();\n            Ar.scaleName = \"o6Emp\";             // scaled in E minor pentatonic on octave 6\n            Ar.pattern = [0,1,2,3,4,2,3,1];     // basic pattern is \"egab<d>abg\" in MML\n            Ar.noteLength = 1;                  // note langth = 16th \n            Ar.gateTime = 0.2;                  // gate time = 0.2\n            Ar.effectors = [autopan];           // apply auto-panning effector to Arpeggiator (local effector)\n            // These effect send level calculations porvides MIDI's effect send feelings (but not perfectly same).\n            // 下記のエフェクトセンドレベル計算を行う事で，ある程度 MIDI 音源のエフェクトセンドのように振舞う事ができます．\n            Ar.volume = 0.3;                    // dry volume = 0.3\n            Ar.effectSend1 = Ar.volume * 0.4;   // effect send for slot1 = 0.3 * 0.4 = 0.12\n            Ar.effectSend2 = Ar.volume * 0.5;   // effect send for slot2 = 0.3 * 0.4 = 0.15\n            // In this sample, the wave table synthesizer is applied to Arpeggiator. \n            // このサンプルでは，波形メモリシンセを Arpeggiator に適用しました．\n            // The wave table synthesizer provides simple additive synthesis by SiON's \"wavecolor\". Or you can edit wave shape directly.\n            // 波形メモリシンセは SiON の \"wavecolor\" を指定するシンプルな加算合成方式シンセサイザです. 波形を直接編集することも出来ます．\n            waveTableSynth = new WaveTableSynth();\n            waveTableSynth.color = 0x1203acff;  // wavecolor value\n            waveTableSynth.releaseTime = 0.2;   // release time\n            Ar.synthesizer = waveTableSynth;    // apply synthesizer\n            new ArPanel(this, Ar);\n            \n            \n            // BassSequencer\n            //----------------------------------------\n            // The BassSequencer is a monophonic sequencer select bass line pattern by number. You can also apply orignal pattern.\n            // BassSequencer は，ベースラインパターンを番号で指定する単音シーケンサです．独自パターンを指定することも出来ます．\n            Bs = new BassSequencer(\"\");             // in current version(0.60) you have to pass something in 1st argument... sorry\n            Bs.chordName = \"o3Em9\";                 // E minor 9th chord on octave 3\n            Bs.patternNumber = 6;                   // bass line pattern number 6\n            Bs.changePatternOnNextSegment = false;  // change pattern immediately after changing patternNumber property\n            Bs.volume = 0.4;                        // dry volume = 0.3\n            // In this sample, the analog-like synthesizer is applied to BassSequencer. \n            // このサンプルでは，アナログライクシンセを BassSequencer に適用しました．\n            // The analog-like synth provide controls by \"analog synthesizer like\" parameters.\n            // アナログライクシンセはアナログシンセのようなパラメータで波形をコントロールする事ができます.\n            analogSynth = new AnalogSynth();\n            analogSynth.ws1 = AnalogSynth.SAW;      // wave shape of vco1 = saw wave\n            analogSynth.ws2 = AnalogSynth.SAW;      // wave shape of vco2 = saw wave\n            analogSynth.vco2pitch = 0.1;            // pitch difference of vco2 = 0.1 (10cent)\n            analogSynth.setVCAEnvelop(0.2, 0.5, 0.75, 0.2);     // set ADSR amplitude envelop\n            analogSynth.setVCFEnvelop(0.4, 0.3, 0.1, 0.6, 0.7); // set filter envelop (cutoff, resonance, attack, decay, peak cutoff)\n            Bs.synthesizer = analogSynth;           // apply synthesizer\n            new BsPanel(this, Bs);\n\n\n            // ChordPad\n            //----------------------------------------\n            // The ChordPad is a polyphonic sequencer plays a rhythm pattern which lengthes are specifyed by int Array. \n            // ChordPad は，int 型 Array で長さを指定したリズムパターンを演奏する多声シーケンサです．\n            // The number of voices (1~6) should be specifyed in constructor. The default number of voices is 3.\n            // 同時発音数(1～6) はコンストラクタで渡す必要があります．指定しない場合のデフォルト値は 3 です．\n            Cp = new ChordPad(null, 4);\n            Cp.chordName = \"Em9\";                           // E minor 9th chord on octave 5 (default)\n            Cp.voiceMode = ChordPad.HIGH;                   // high position voicing mode\n            Cp.pattern = [4,0,0,0,0,0,1,0,2,0,0,1,0,0,1,0]; // pattern of lengthes. 0 means no sound\n            Cp.gateTime = 0.8;                              // gate time = 0.8\n            Cp.volume = 0.2;                                // dry volume = 0.2\n            Cp.effectSend1 = Cp.volume * 0.3;               // effect send for slot1 = 0.2 * 0.3 = 0.06\n            Cp.effectSend2 = Cp.volume * 0.3;               // effect send for slot2 = 0.2 * 0.3 = 0.06\n            // In this sample, preset voice loader is applied to ChordPad. \n            // このサンプルでは，プリセットボイスローダを ChordPad に適用しました．\n            // The preset voice loader provides simple voice number access to SiONPresetVoice.\n            // プリセットボイスローダは SiONPresetVoice に対するボイス番号によるアクセスを提供します．\n            padVoiceLoader = new PresetVoiceLoader(\"svmidi\"); // load voice categoly \"svmidi\"\n            padVoiceLoader.voiceNumber = 7;     // voice number = 7 (clavinet)\n            Cp.synthesizer = padVoiceLoader;    // apply synthesizer\n            new CpPanel(this, Cp);\n\n            \n            // DrumMachine\n            //----------------------------------------\n            // The DrumMachine is a 3 tracks sequencer plays drum patterns specifyed by independent number for each bass, snare and hihat.\n            // DrumMachine は，バス，スネア，ハイハットそれぞれに独立した番号でドラムパターンを指定するを3声シーケンサです．\n            Dm = new DrumMachine();\n            Dm.bassPatternNumber = 0;   // bass drum pattern number\n            Dm.snarePatternNumber = 8;  // snare drum pattern number\n            Dm.hihatPatternNumber = 0;  // hihat drum pattern number\n            Dm.changePatternOnNextSegment = false;  // change pattern immediately after changing ****PatternNumber property\n            Dm.volume = 0.4;\n            // In this sample, we use default voices of DrumMachine. You can also apply any voices for each track.\n            // このサンプルでは，DrumMachine のデフォルトボイスを使用しています．各トラックに独自のボイスを割り当てることも出来ます．\n            // All DrumMachine's default voices are 1 operator voice, so you can play very light-weighted rhythm track.\n            // DrumMachine のデフォルトボイスは全て１オペレータで合成するため，非常に軽快にリズムトラックを再生できます．\n            Dm.bassVoiceNumber = 0;   // bass drum voice number\n            Dm.snareVoiceNumber = 2;  // snare drum voice number\n            Dm.hihatVoiceNumber = 0;  // hihat drum voice number\n            new DmPanel(this, Dm);\n            \n            \n            // start playing !!\n            // 演奏開始！！\n            play();\n        }\n        \n        \n        public function play() : void {\n            // Even using SoundObject, you have to call SiONDriver.play() method to start SiON's sound streaming.\n            // SoundObject を使用する場合であっても，SiON で音を合成するのために SiONDriver.play() メソッドを呼び出す必要があります．\n            // In this sample, effectors are specifyed before calling play() method, \n            // このサンプルでは，play() メソッド呼び出しの前にエフェクタを設定しているため，\n            // so we pass false in the 2nd argument to avoid initializing effector inside.\n            // 第二引数で false を渡して内部でエフェクタの初期化を行わないようにしています．\n            driver.play(null, false);\n            \n            \n            // The SoundObject starts playing sound by play() method and stop it by stop() method.\n            // SoundObject は，play() メソッドで演奏を開始し，stop() メソッドで演奏を停止します．\n            Ar.play();\n            Bs.play();\n            Cp.play();\n            Dm.play();\n        }\n        \n        \n        // started\n        protected function _onStartStream(e:SiONEvent) : void {\n            // switch the play button's label\n            GlobalPanel.changePlayButtonLabel(\"stop\");\n        }\n        \n        \n        // stopped\n        protected function _onStopStream(e:SiONEvent) : void {\n            // In current version (0.60), you have to stop all SoundObjects explicitly when the SiON's stream stopped.\n            // 現バージョン(0.60)では，SiON のストリーミング終了時に，明示的に SoundObject の演奏を止める必要があります．\n            // In the future version, it may stop automatically. Sorry for the inconvenience.\n            // 将来のバージョンでは，自動的に演奏を止めるようになる予定です．ご面倒おかけしてすいません．\n            Ar.stop();\n            Bs.stop();\n            Cp.stop();\n            Dm.stop();\n            \n            // switch the play button's label\n            GlobalPanel.changePlayButtonLabel(\"play\");\n        }\n        \n        \n        // So, what shall we do here ?\n        protected function _onBeat(e:SiONTrackEvent) : void {\n        }\n        \n        \n        // So, what shall we do here ???\n        protected function _onKeyDown(e:KeyboardEvent) : void {\n            switch (String.fromCharCode(e.charCode)) {\n            case 'c': _updateChord(\"o6Emp\", \"o3CM7\", \"o5CM7\"); break;\n            case 'd': _updateChord(\"o6Emp\", \"o3D9\",  \"o5D9\");  break;\n            case 'e': _updateChord(\"o6Emp\", \"o3Em9\", \"o5Em9\"); break;\n            case 'f': _updateChord(\"o6F+b\", \"o3F+7\", \"o5F+7\"); break;\n            case 'g': _updateChord(\"o6Emp\", \"o3GM7\", \"o5GM7\"); break;\n            case 'a': _updateChord(\"o6Emp\", \"o3Am9\", \"o5CM7\"); break;\n            case 'b': _updateChord(\"o5Bb\",  \"o2B7\",  \"o4B7\");  break;\n            }\n        }\n        \n        \n        // Specify chord and scale name for each instrument except for DrumMachine.\n        // DrumMachine 以外の各楽器にコード名/スケール名を指定します． \n        public function _updateChord(ArScale:String, BrChord:String, CpChord:String) : void {\n            Ar.scaleName = ArScale;\n            Bs.chordName = BrChord;\n            Cp.chordName = CpChord;\n        }\n        \n        \n        // General settings\n        private function _generalSettings() : void {\n            // color setting\n            Style.BACKGROUND = 0x808080;\n            Style.BUTTON_FACE = 0x606060;\n            Style.LABEL_TEXT = 0xaaaaaa;\n            Style.DROPSHADOW = 0;\n            Style.PANEL = 0x303030;\n            Style.PROGRESS_BAR = 0x404040;\n            Style_POINTER = 0x8080ff;\n            \n            // draw background\n            var shape:Shape = new Shape();\n            shape.graphics.beginFill(0);\n            shape.graphics.drawRect(0,0,465,465);\n            shape.graphics.endFill();\n            addChild(shape);\n            \n            // add event handlers\n            stage.addEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown);\n        }\n    }\n}\n\n\n\n\n//----------------------------------------\n// Hints for advanced usage\n//----------------------------------------\n// Sorry, there are extremely few comments in the following code.\n// すいません．以降，本領発揮でほとんどコメントがありません．\n// You may search some hints with the keywords of \"Ar.\", \"Bs.\", \"Cp.\" and \"Dm.\".\n// \"Ar.\", \"Bs.\", \"Cp.\", \"Dm.\" の各文字列で以降を検索すると，SoundObject のプロパティの使い方のヒントになるかもしれません．\n// And if you are interested in customized Component, please search by \"custom\".\n// また，もしカスタマイズされた Component に興味がある場合，\"custom\" で検索してみて下さい．\n\nimport flash.display.*;\nimport flash.events.*;\nimport flash.geom.*;\nimport org.si.sion.*;\nimport org.si.sion.utils.*;\nimport org.si.sion.events.*;\nimport org.si.sion.effector.*;\nimport org.si.sound.*;\nimport org.si.sound.events.*;\nimport org.si.sound.patterns.*;\nimport org.si.sound.synthesizers.*;\nimport com.bit101.components.*;\nvar Style_POINTER:uint;\n\nclass GlobalPanel extends Panel {\n    static private var me:GlobalPanel;\n    public var start:PushButton, vol:Knob_, tempo:Knob_, low:Knob_, mid:Knob_, high:Knob_, lowVal:Label, midVal:Label, highVal:Label;\n    private var _driver:SiONDriver, _eq:SiEffectEqualiser, _updateChord:Function, _play:Function;\n    private var _table:Vector.<Number> = new Vector.<Number>(101);\n    \n    function GlobalPanel(_main:main) {\n        super(_main, 2, 25);\n        setSize(461, 51);\n        for (var i:int=0; i<101; i++) _table[i] = Math.pow(2, i*0.04-2);\n        _driver = _main.driver;\n        _eq = _driver.effector.getEffectorList(0)[0] as SiEffectEqualiser;\n        _updateChord = _main._updateChord;\n        _play = _main.play;\n        var tl:Label = new Label(content, 4, -4, \"SiON SoundObject Quartet\");\n        tl.scaleX = tl.scaleY = 2;\n        \n        start = new PushButton(content, 4, 30, \"stop\", function(e:Event) : void {\n            if (start.label == \"stop\") _driver.fadeOut(3);\n            else _play();\n        });\n        start.setSize(38, 14);\n        new PushButton(content,  50, 30, \"GM7\", function(e:Event):void { _updateChord(\"o6Emp\", \"o3GM7\", \"o5GM7\");}).setSize(33, 14);\n        new PushButton(content,  85, 30, \"Am9\", function(e:Event):void { _updateChord(\"o6Emp\", \"o3Am9\", \"o5CM7\");}).setSize(33, 14);\n        new PushButton(content, 120, 30, \"CM7\", function(e:Event):void { _updateChord(\"o6Emp\", \"o3CM7\", \"o5CM7\");}).setSize(33, 14);\n        new PushButton(content, 155, 30, \"D9\",  function(e:Event):void { _updateChord(\"o6Emp\", \"o3D9\",  \"o5D9\"); }).setSize(33, 14);\n        new PushButton(content, 190, 30, \"Em9\", function(e:Event):void { _updateChord(\"o6Emp\", \"o3Em9\", \"o5Em9\");}).setSize(33, 14);\n\n        vol = new Knob_(content, 242, -3, \"volume\", function(e:Event):void { _driver.volume = vol.value; });\n        vol.value = _driver.volume;\n        \n        tempo = new Knob_(content, 278, -3, \"BPM\", function(e:Event):void { _driver.bpm = tempo.value; });\n        tempo.setSize(20, 20);\n        tempo.minimum = 70;\n        tempo.maximum = 200;\n        tempo.value = _driver.bpm;\n        \n        new Label(content, 350, 35, \"3 Band Equaliser\");\n        low = _eqKnob(370, \"low\");\n        mid = _eqKnob(400, \"middle\");\n        high = _eqKnob(430, \"high\");\n        \n        new Label(content, 310, -2, \"low\");\n        new Label(content, 310, 11, \"middle\");\n        new Label(content, 310, 24, \"high\");\n        lowVal = new Label(content, 340, -2, \"1.00\");\n        midVal = new Label(content, 340, 11, \"1.00\");\n        highVal = new Label(content, 340, 24, \"1.00\");\n        \n        me = this;\n    }\n\n    protected function _eqKnob(x:Number, label:String) : Knob_ {\n        var knob:Knob_ = new Knob_(content, x, -3, label, _updateEQ);\n        knob.minimum = 0;\n        knob.maximum = 100;\n        knob.value = 50;\n        knob.valueLabel.visible = false;\n        return knob;\n    }\n    \n    protected function _updateEQ(e:Event) : void {\n        var l:Number = _table[int(low.value)], m:Number = _table[int(mid.value)], h:Number = _table[int(high.value)];\n        _eq.setParameters(l, m, h);\n        lowVal.text = l.toFixed(2);\n        midVal.text = m.toFixed(2);\n        highVal.text = h.toFixed(2);\n    }\n    \n    static public function changePlayButtonLabel(label:String) : void {\n        me.start.label = label;\n    }\n}\n\nclass SoundObjectPanel extends Panel {\n    private var _soundObject:SoundObject, es1:VSlider, es2:VSlider, mute:CheckBox;\n    \n    function SoundObjectPanel(parent:DisplayObjectContainer, x:Number, y:Number, title:String, soundObject:SoundObject, fadeButton:Boolean = true) {\n        super(parent, x, y);\n        _soundObject = soundObject;\n        setSize(230, 180);\n        var tl:Label = new Label(content, 4, -4, title);\n        tl.scaleX = tl.scaleY = 2;\n        mute = new CheckBox(content, 7, 32, \"mute\", function(e:Event):void{\n            _soundObject.mute = mute.selected;\n        });\n        var vol:Knob_ = new Knob_(content, 10, 30, \"\", function(e:Event):void{\n            _soundObject.volume = e.target.value;\n            _soundObject.effectSend1 = _soundObject.volume * es1.value;\n            _soundObject.effectSend2 = _soundObject.volume * es2.value;\n        });\n        vol.value = _soundObject.volume;\n        es1 = new VSlider(content,  8, 90, function(e:Event):void{ _soundObject.effectSend1 = _soundObject.volume * es1.value; });\n        es2 = new VSlider(content, 24, 90, function(e:Event):void{ _soundObject.effectSend2 = _soundObject.volume * es2.value; });\n        new Label(content,  6, 162, \"Del\");\n        new Label(content, 22, 162, \"Cho\");\n        es1.setSize(12,72);\n        es2.setSize(12,72);\n        es1.tick = 0.0078125;\n        es2.tick = 0.0078125;\n        es1.setSliderParams(0,1,_soundObject.effectSend1/_soundObject.volume);\n        es2.setSliderParams(0,1,_soundObject.effectSend2/_soundObject.volume);\n        if (fadeButton) {\n            new PushButton(content, 141, 4, \"fadeIn\",  function(e:Event):void{ _soundObject.fadeIn(3);  }).setSize(40,14);\n            new PushButton(content, 183, 4, \"fadeOut\", function(e:Event):void{ _soundObject.fadeOut(4); }).setSize(43,14);\n        }\n    }\n}\n\n\nclass ArPanel extends SoundObjectPanel {\n    public var Ar:Arpeggiator, waveTableSynth:WaveTableSynth, manual:CheckBox;\n    public var pad:ControlPad, si:Label, gt:Label, nl:Label, po:Label, wc:Label;\n    public var col8th:VSlider, col5th:VSlider, col4th:VSlider, ws:RotarySelector;\n    function ArPanel(parent:DisplayObjectContainer, Ar:Arpeggiator) {\n        super(parent, 2, 78, \"Arpeggiator\", Ar, false);\n        this.Ar = Ar;\n        this.waveTableSynth = Ar.synthesizer as WaveTableSynth;\n        \n        new Label(content, 50, 30, \"wavecolor :\");\n        wc = new Label(content, 50, 43, \"\");\n        col4th = new VSlider(content, 52, 95, onColorChanged);\n        col5th = new VSlider(content, 67, 95, onColorChanged);\n        col8th = new VSlider(content, 82, 95, onColorChanged);\n        col4th.setSliderParams(0, 1, 0.2);\n        col5th.setSliderParams(0, 1, 0.4);\n        col8th.setSliderParams(0, 1, 0.6);\n        col4th.setSize(12, 80);\n        col5th.setSize(12, 80);\n        col8th.setSize(12, 80);\n        col4th.tick = 0.0078125;\n        col5th.tick = 0.0078125;\n        col8th.tick = 0.0078125;\n        ws = new RotarySelector(content, 65, 72, \"\", onColorChanged);\n        ws.numChoices = 4;\n        ws.choice = 3;\n        ws.setSize(16, 16);\n        onColorChanged(null);\n        \n        new Label(content, 110, 120, \"scaleIndex property\");\n        new Label(content, 110, 134, \"gateTime property\");\n        new Label(content, 110, 148, \"noteLength property\");\n        new Label(content, 110, 162, \"protament property\");\n        si = new Label(content, 200, 120, \": \"+Ar.scaleIndex.toString());\n        gt = new Label(content, 200, 134, \": \"+Ar.gateTime.toFixed(2));\n        nl = new Label(content, 200, 148, \": \"+Ar.noteLength.toFixed(1));\n        po = new Label(content, 200, 162, \": \"+Ar.portament.toString());\n        \n        manual = new CheckBox(content, 120, 6, \"manual control\", function(e:Event) : void {\n            if (manual.selected) {\n                pad.onStart = Ar.play;\n                pad.onStop = Ar.stop;\n                Ar.stop();\n            } else {\n                pad.onStart = null;\n                pad.onStop = null;\n                Ar.play();\n            }\n        });\n        manual.selected = false;\n        pad = new ControlPad(content, 120, 22, 100, 100);\n        pad.onChange = function() : void {\n            Ar.scaleIndex = pad.rx * 20 - 10;\n            Ar.gateTime = pad.ry;\n            Ar.noteLength = [2,1,2,1][int(pad.ry * 3.9)];\n            Ar.portament = (pad.ry == 0 || pad.ry == 1) ? 5 : 0;\n            gt.text = \": \"+Ar.gateTime.toFixed(2);\n            po.text = \": \"+Ar.portament.toString();\n            si.text = \": \"+Ar.scaleIndex.toString();\n            nl.text = \": \"+Ar.noteLength.toFixed(1);\n        }\n        pad.setPointer(0.5, Ar.gateTime);\n    }\n    \n    protected function onColorChanged(e:Event) : void {\n        var c8:Number = col8th.value, c5:Number = col5th.value, c4:Number = col4th.value, col:uint = 0;\n        col |= (c8<0.75) ? 15 : int((1 - c8) * 60);\n        col |= ((c8<0.50) ? (c8*30) : (c8<0.75) ? 15 : int((1 - c8) * 44 + 4))<<4;\n        col |= ((c8<0.25) ? 0 : (c8<0.75) ? int((c8-0.25)*30) : int((1 - c8) * 32 + 7))<<12;\n        col |= ((c8<0.50) ? 0 : int((c8-0.5)*30))<<24;\n        col |= ((c5<0.50) ? int(c5*30) : 15)<<8;\n        col |= ((c5<0.50) ? 0 : int((c5-0.5)*30))<<20;\n        col |= (c4*15)<<16;\n        col |= [0,3,5,1][ws.choice]<<28;\n        waveTableSynth.color = col;\n        wc.text = \"0x\"+(\"0000000\"+col.toString(16)).substr(-8,8);\n    }\n}\n\nclass BsPanel extends SoundObjectPanel {\n    public var Bs:BassSequencer, analogSynth:AnalogSynth;\n    public var patternNumber:Label, vca:EnvelopControler, vcf:EnvelopControler, res:VSlider;\n    public var aat:Label, adt:Label, asl:Label, art:Label;\n    public var fco:Label, fre:Label, fat:Label, fdt:Label, fpk:Label;\n    function BsPanel(parent:DisplayObjectContainer, Bs:BassSequencer) {\n        super(parent, 233, 78, \"BassSequencer\", Bs);\n        this.Bs = Bs;\n        this.analogSynth = Bs.synthesizer as AnalogSynth;\n\n        new Label(content, 50, 30, \"patternNumber property : \");\n        patternNumber = new Label(content, 215, 48, String(Bs.patternNumber));\n        var ps:HSlider = new HSlider(content, 50, 48, function(e:Event):void{ \n            Bs.patternNumber = e.target.value; \n            patternNumber.text = String(Bs.patternNumber);\n        });\n        ps.setSize(160, 14);\n        ps.setSliderParams(0, Bs.patternNumberMax-1,  Bs.patternNumber);\n\n        vca = new EnvelopControler(content, 50,  68, 100, 54, {\n            \"at\":analogSynth.attackTime  * 1.4285714285714286,\n            \"dt\":analogSynth.decayTime   * 1.4285714285714286, \n            \"sl\":analogSynth.sustainLevel,\n            \"rt\":analogSynth.releaseTime * 1.4285714285714286\n        });\n        vca.onUpdate = onVCAUpdate;\n        new Label(content, 125, 68, \"VCA\");\n        \n        vcf = new EnvelopControler(content, 50, 124, 100, 54, {\n            \"at\":analogSynth.vcfAttackTime  * 1.4285714285714286,\n            \"tl\":analogSynth.vcfPeakCutoff, \n            \"dt\":analogSynth.vcfDecayTime   * 1.4285714285714286, \n            \"sl\":analogSynth.cutoff\n        });\n        vcf.onUpdate = onVCFUpdate;\n        new Label(content, 125, 124, \"VCF\");\n        res = new VSlider(content, 152, 124, onVCFUpdate);\n        res.setSliderParams(0, 1, analogSynth.resonance);\n        res.setSize(10, 54);\n        res.tick = 0.0078125;\n        \n        var ly:Number = 54;\n        aat = envparam(\"attackT.\", analogSynth.attackTime);\n        adt = envparam(\"decayT.\",  analogSynth.decayTime);\n        asl = envparam(\"sustainL.\",analogSynth.sustainLevel);\n        art = envparam(\"releaseT.\",analogSynth.releaseTime);\n        fco = envparam(\"cutoff\",   analogSynth.cutoff);\n        fre = envparam(\"resonan.\", analogSynth.resonance);\n        fat = envparam(\"vcfAtt.\",  analogSynth.vcfAttackTime);\n        fdt = envparam(\"vcfDec.\",  analogSynth.vcfDecayTime);\n        fpk = envparam(\"vcfPeak\",  analogSynth.vcfPeakCutoff);\n        \n        function envparam(label:String, value:Number) : Label {\n            ly +=12;\n            new Label(content, 164, ly, label);\n            return new Label(content, 204, ly, value.toFixed(2)); \n        }\n    }\n    \n    protected function onVCAUpdate(e:Event=null) : void {\n        analogSynth.setVCAEnvelop(vca.at*0.7, vca.dt*0.7, vca.sl, vca.rt*0.7);\n        aat.text = analogSynth.attackTime.toFixed(2);\n        adt.text = analogSynth.decayTime.toFixed(2);\n        asl.text = analogSynth.sustainLevel.toFixed(2);\n        art.text = analogSynth.releaseTime.toFixed(2);\n    }\n    \n    protected function onVCFUpdate(e:Event=null) : void {\n        analogSynth.setVCFEnvelop(vcf.sl*vcf.tl, res.value, vcf.at*0.7, vcf.dt*0.7, vcf.tl);\n        fco.text = analogSynth.cutoff.toFixed(2);\n        fre.text = analogSynth.resonance.toFixed(2);\n        fat.text = analogSynth.vcfAttackTime.toFixed(2);\n        fdt.text = analogSynth.vcfDecayTime.toFixed(2);\n        fpk.text = analogSynth.vcfPeakCutoff.toFixed(2);\n    }\n}\n\nclass CpPanel extends SoundObjectPanel {\n    public var Cp:ChordPad, padVoiceLoader:PresetVoiceLoader, nameLabel:Label, ls:LengthSequencer, pb:HSlider, pbLabel:Label;\n    public var voiceNumbers:Array = [3, 5, 7, 12, 16, 17, 18, 25, 81, 87];\n    function CpPanel(parent:DisplayObjectContainer, Cp:ChordPad) {\n        super(parent, 2, 260, \"ChordPad\", Cp);\n        this.Cp = Cp;\n        this.padVoiceLoader = Cp.synthesizer as PresetVoiceLoader;\n        \n        var shape:Shape = new Shape();\n        shape.graphics.beginFill(Style.BUTTON_FACE);\n        shape.graphics.drawRect(56, 90, 48, 14);\n        shape.graphics.endFill();\n        content.addChild(shape);\n        nameLabel = new Label(content, 58, 87, padVoiceLoader.voice.name);\n\n        var vn:RotarySelector = new RotarySelector(content, 60, 45, \"\", function(e:Event):void {\n            padVoiceLoader.voiceNumber = voiceNumbers[e.target.choice];\n            nameLabel.text = padVoiceLoader.voice.name;\n        });\n        vn.setSize(40, 40);\n        vn.labelMode = \"roman\";\n        vn.numChoices = 10;\n        vn.choice = 2;\n        \n        new Label(content, 128, 21, \"voiceMode property :\");\n        new RadioButton(content, 132, 39, \"CLOSED\",      false, function(e:Event):void { Cp.voiceMode = ChordPad.CLOSED; });\n        new RadioButton(content, 132, 53, \"OPENED\",      false, function(e:Event):void { Cp.voiceMode = ChordPad.OPENED; });\n        new RadioButton(content, 132, 67, \"MIDDLE\",      false, function(e:Event):void { Cp.voiceMode = ChordPad.MIDDLE; });\n        new RadioButton(content, 132, 81, \"HIGH\",        true,  function(e:Event):void { Cp.voiceMode = ChordPad.HIGH; });\n        new RadioButton(content, 132, 95, \"OPENED_HIGH\", false, function(e:Event):void { Cp.voiceMode = ChordPad.OPENED_HIGH; });\n\n        new Label(content, 50, 104, \"pitchBend property :\");\n        pbLabel = new Label(content, 156, 104, \"0.00\");\n        pb = new HSlider(content, 50, 124, function(e:Event):void { Cp.pitchBend = pb.value; });\n        pb.addEventListener(\"enterFrame\", function(e:Event):void { \n            Cp.pitchBend = (pb.value *= 0.92);\n            pbLabel.text = Cp.pitchBend.toFixed(2);\n        })\n        pb.setSliderParams(-2, 2, 0);\n        pb.setSize(176, 12);\n        pb.tick = 0.0078125;\n        \n        new Label(content, 50, 138, \"pattern property :\");\n        ls = new LengthSequencer(content, 50, 160, 176, 12, Cp.pattern);\n        ls.onUpdate = function() : void { Cp.pattern = ls.pattern; }\n        new PushButton(content, 176, 142, \"clear\", function():void{ Cp.pattern = ls.clear(); }).setSize(50, 14);\n    }\n}\n\nclass DmPanel extends SoundObjectPanel {\n    public var Dm:DrumMachine;\n    public var bdpNumber:Label, sdpNumber:Label, hhpNumber:Label;\n    public var bdMute:CheckBox, sdMute:CheckBox, hhMute:CheckBox;\n    function DmPanel(parent:DisplayObjectContainer, Dm:DrumMachine) {\n        super(parent, 233, 260, \"DrumMachine\", Dm);\n        this.Dm = Dm;\n        \n        new Label(content, 50, 35, \"bassPatternNumber property : \");\n        bdpNumber = new Label(content, 215, 54, String(Dm.bassPatternNumber));\n        var bdp:HSlider = new HSlider(content, 50, 54, function(e:Event):void{ \n            Dm.bassPatternNumber = e.target.value; \n            bdpNumber.text = String(Dm.bassPatternNumber);\n        });\n        bdp.setSize(160, 14);\n        bdp.setSliderParams(0, Dm.bassPatternNumberMax-1,  Dm.bassPatternNumber);\n        \n        new Label(content, 50, 70, \"snarePatternNumber property : \");\n        sdpNumber = new Label(content, 215, 89, String(Dm.snarePatternNumber));\n        var sdp:HSlider = new HSlider(content, 50, 89, function(e:Event):void{ \n            Dm.snarePatternNumber = e.target.value; \n            sdpNumber.text = String(Dm.snarePatternNumber);\n        });\n        sdp.setSize(160, 14);\n        sdp.setSliderParams(0, Dm.snarePatternNumberMax-1, Dm.snarePatternNumber);\n        \n        new Label(content, 50, 105, \"hihatPatternNumber property : \");\n        hhpNumber = new Label(content, 215, 124, String(Dm.hihatPatternNumber));\n        var hhp:HSlider = new HSlider(content, 50, 124, function(e:Event):void{ \n            Dm.hihatPatternNumber = e.target.value; \n            hhpNumber.text = String(Dm.hihatPatternNumber);\n        });\n        hhp.setSize(160, 14);\n        hhp.setSliderParams(0, Dm.hihatPatternNumberMax-1, Dm.hihatPatternNumber);\n        \n        new Label(content, 50, 140, \"Sequencer.mute property : \");\n        bdMute = new CheckBox(content,  50, 160, \"bass\",  function(e:Event):void{ Dm.bass.mute  = bdMute.selected; });\n        sdMute = new CheckBox(content, 120, 160, \"snare\", function(e:Event):void{ Dm.snare.mute = sdMute.selected; });\n        hhMute = new CheckBox(content, 190, 160, \"hihat\", function(e:Event):void{ Dm.hihat.mute = hhMute.selected; });\n    }\n}\n\n\n// custom component \"Knob_\" is a small knob.\nclass Knob_ extends Component {\n    public var knob:Sprite, label:Label, valueLabel:Label, _startY:Number, rad:Number=10, value:Number=0;\n    public var minimum:Number=0, maximum:Number=1;\n    function Knob_(parent:DisplayObjectContainer, x:Number, y:Number, labelText:String, onChange:Function) {\n        super(parent, x, y);\n        addChild(knob = new Sprite());\n        knob.filters = [getShadow(1)];\n        knob.buttonMode = true;\n        knob.useHandCursor = true;\n        knob.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);\n        label = new Label(this, 0, 0, labelText);\n        label.autoSize = true;\n        label.draw();\n        label.x = rad - label.width / 2;\n        valueLabel = new Label(this);\n        valueLabel.autoSize = true;\n        if (onChange != null) addEventListener(Event.CHANGE, onChange);\n    }\n    \n    override public function draw() : void {\n        knob.graphics.clear();\n        knob.graphics.beginFill(Style.BACKGROUND);\n        knob.graphics.drawCircle(0, 0, rad);\n        knob.graphics.endFill();\n        knob.graphics.beginFill(Style.BUTTON_FACE);\n        knob.graphics.drawCircle(0, 0, rad - 2);\n        knob.graphics.endFill();\n        knob.graphics.beginFill(Style.BACKGROUND);\n        knob.graphics.drawRect(rad*0.5, -rad*0.1, rad*0.6, rad*0.2);\n        knob.graphics.endFill();\n        knob.x = rad;\n        knob.y = rad + 20;\n        knob.rotation = -225 + (value - minimum)/(maximum - minimum) * 270;\n        valueLabel.text = value.toFixed(2);\n        valueLabel.draw();\n        valueLabel.x = rad - valueLabel.width * 0.5;\n        valueLabel.y = rad * 2 + 20;\n    }\n    \n    protected function onMouseDown(event:MouseEvent) : void {\n        _startY = mouseY;\n        stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);\n        stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);\n    }\n    \n    protected function onMouseMove(event:MouseEvent):void {\n        var oldValue:Number=value, diff:Number=_startY-mouseY, \n            range:Number=maximum-minimum, percent:Number=range/200;\n        value += percent * diff;\n        if (value < minimum) value = minimum;\n        else if (value > maximum) value = maximum;\n        if (value != oldValue) {\n            invalidate();\n            dispatchEvent(new Event(Event.CHANGE));\n        }\n        _startY = mouseY;\n    }\n    \n    protected function onMouseUp(event:MouseEvent) : void {\n        stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);\n        stage.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);\n    }\n}\n\n\n// custom component \"ControlPad\" shown in Arpeggiator panel\nclass ControlPad extends Component {\n    public var back:Sprite, pointer:Sprite, rx:Number=0.5, ry:Number=0.5, w:Number, h:Number;\n    public var onStart:Function=null, onChange:Function, onStop:Function=null;\n    function ControlPad(parent:DisplayObjectContainer, x:Number, y:Number, width:Number, height:Number) {\n        super(parent, x, y);\n        addChild(back = new Sprite());\n        back.filters = [getShadow(2, true)];\n        back.addEventListener(MouseEvent.MOUSE_DOWN, onBackClick);\n        addChild(pointer = new Sprite());\n        pointer.filters = [getShadow(1)];\n        pointer.buttonMode = true;\n        pointer.useHandCursor = true;\n        pointer.addEventListener(MouseEvent.MOUSE_DOWN, onDrag);\n        setSize(width, height);\n        w = width - 12;\n        h = height - 12;\n    }\n    \n    override public function draw() : void {\n        super.draw();\n        back.graphics.clear();\n        back.graphics.beginFill(Style.BACKGROUND);\n        back.graphics.drawRect(0, 0, width, height);\n        back.graphics.endFill();\n        pointer.graphics.beginFill(Style_POINTER, 0.5);\n        pointer.graphics.lineStyle(2,Style.BUTTON_FACE);\n        pointer.graphics.drawCircle(5, 5, 5);\n        pointer.graphics.endFill();\n        updatePointerPosition();\n    }\n    \n    protected function onDrag(e:Event) : void {\n        stage.addEventListener(MouseEvent.MOUSE_UP, onDrop);\n        stage.addEventListener(MouseEvent.MOUSE_MOVE, onSlide);\n        pointer.startDrag(false, new Rectangle(0, 0, w, h));\n        if (onStart != null) onStart();\n    }\n    \n    protected function onDrop(e:MouseEvent) : void {\n        stage.removeEventListener(MouseEvent.MOUSE_UP, onDrop);\n        stage.removeEventListener(MouseEvent.MOUSE_MOVE, onSlide);\n        stopDrag();\n        if (onStop != null) onStop();\n    }\n\n    protected function onSlide(e:MouseEvent) : void {\n        var _rx:Number = rx, _ry:Number = ry;\n        rx = pointer.x / w;\n        ry = pointer.y / h;\n        rx = (rx<0) ? 0 : (rx>1) ? 1 : rx;\n        ry = (ry<0) ? 0 : (ry>1) ? 1 : ry;\n        if (_rx != rx || _ry != ry) onChange();\n    }\n    \n    protected function onBackClick(e:MouseEvent) : void {\n        pointer.x = mouseX - 6;\n        pointer.y = mouseY - 6;\n        onSlide(e);\n        onDrag(null);\n    }\n    \n    public function setPointer(x:Number, y:Number) : void {\n        rx = x;\n        ry = y;\n        updatePointerPosition();\n    }\n    \n    public function updatePointerPosition() : void {\n        pointer.x = rx * w;\n        pointer.y = ry * h;\n    }\n}\n\n\n// custom component \"EnvelopControler\" shown in BassSequencer panel\nclass EnvelopControler extends ControlPad {\n    public var env:Sprite, at:Number, tl:Number, dt:Number, sl:Number, sr:Number, rt:Number;\n    public var srFixed:Boolean, tlFixed:Boolean, rlFixed:Boolean, dragIndex:int, pt:Array, onUpdate:Function;\n    function EnvelopControler(parent:DisplayObjectContainer, x:Number, y:Number, width:Number, height:Number, p:*) {\n        at=p[\"at\"]; dt=p[\"dt\"]; sl=p[\"sl\"];\n        srFixed=!(\"sr\" in p); tlFixed=!(\"tl\" in p); rlFixed=!(\"rt\" in p);\n        tl=(tlFixed)?1:p[\"tl\"]; sr=(srFixed)?1:p[\"sr\"]; rt=(rlFixed)?1:p[\"rt\"];\n        dragIndex = 0;\n        super(parent, x, y, width, height);\n        back.addChild(env = new Sprite());\n        env.filters = [getShadow(1)];\n        addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);\n        onChange = _onChange;\n        onStart = _onStart;\n        onStop = _onStop;\n        rx = at * 0.3;\n        ry = 1 - tl;\n    }\n    \n    override public function draw() : void {\n        super.draw();\n        updateEnvelop();\n    }\n    \n    protected function updateEnvelop() : void {\n        pt = [[at*w*0.3,(1-tl)*h], [(at+dt)*w*0.3,(1-sl*tl)*h], [w*0.7,(1-sl*tl)*sr*h], [(rlFixed)?w:(0.7+rt*0.3)*w,(rlFixed)?((1-sl*tl)*sr*h):h]];\n        env.graphics.clear();\n        env.graphics.lineStyle(2,Style.BUTTON_FACE);\n        env.graphics.moveTo(5, h+5);\n        env.graphics.lineTo(pt[0][0]+5, pt[0][1]+5);\n        env.graphics.lineTo(pt[1][0]+5, pt[1][1]+5);\n        env.graphics.lineTo(pt[2][0]+5, pt[2][1]+5);\n        env.graphics.lineTo(pt[3][0]+5, pt[3][1]+5);\n    }\n    \n    protected function _onStart() : void { removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove); }\n    protected function _onStop()  : void { addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove); }\n    \n    protected function onMouseMove(e:MouseEvent) : void {\n        var i:int, dx:Number=pt[0][0]-mouseX, dy:Number=pt[0][1]-mouseY, d2:Number=dx*dx+dy*dy;\n        for (dragIndex=0, i=1; i<4; i++) {\n            dx = pt[i][0] - mouseX;\n            dy = pt[i][1] - mouseY;\n            if (dx*dx+dy*dy < d2) {\n                d2 = dx*dx+dy*dy;\n                dragIndex = i;\n            }\n        }\n        pointer.x = pt[dragIndex][0];\n        pointer.y = pt[dragIndex][1];\n    }\n    \n    protected function _onChange() : void {\n        var n:Number;\n        switch (dragIndex) {\n        case 0:\n            at = (rx>=0.3) ? 1 : (rx * 3.3333333333333333);\n            tl = (tlFixed) ? 1 : (1 - ry);\n            rx = at * 0.3;\n            ry = 1 - tl;\n            break;\n        case 1:\n            n = rx - at * 0.3;\n            dt = (n<0) ? 0 : (n>=0.3) ? 1 : (n * 3.3333333333333333);\n            sl = (tl==0) ? 0 : ((1 - ry)/tl);\n            if (sl > 1) sl = 1;\n            rx = (at + dt)*0.3;\n            ry = 1 - sl * tl;\n            break;\n        case 2:\n            rx = 0.7;\n            sl = (tl==0) ? 0 : ((1 - ry)/tl);\n            if (sl > 1) sl = 1;\n            ry = 1 - sl * tl;\n            break;\n        case 3:\n            rt = (rlFixed) ? 1 : (rx<0.7) ? 0 : ((rx-0.7) * 3.3333333333333333);\n            rx = rt * 0.3 + 0.7;\n            ry = (rlFixed) ? (1 - sl * tl) : 1;\n            break;\n        default:\n            break;\n        }\n        updatePointerPosition();\n        updateEnvelop();\n        onUpdate();\n    }\n}\n\n\n// custom component \"LengthSequencer\" shown in ChordPad panel\nclass LengthSequencer extends Component {\n    public var back:Sprite, cursor:Sprite, notes:Sprite, sepr:Shape;\n    public var divw:Number, pattern:Array, onUpdate:Function;\n    public var pointer:int=0, dragPoint:int, cursorPos:int, cursorLen:int;\n    function LengthSequencer(parent:DisplayObjectContainer, x:Number, y:Number, width:Number, height:Number, pattern:Array) {\n        super(parent, x, y);\n        this.pattern = pattern;\n        addChild(back = new Sprite());\n        back.filters = [getShadow(2, true)];\n        addEventListener(MouseEvent.MOUSE_DOWN, onDrag);\n        addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);\n        addChild(notes = new Sprite());\n        notes.filters = [getShadow(1)];\n        addChild(cursor = new Sprite());\n        cursor.buttonMode = true;\n        cursor.useHandCursor = true;\n        addChild(sepr = new Shape());\n        setSize(width, height);\n        divw = width/16;\n        back.graphics.clear();\n        back.graphics.beginFill(Style.BACKGROUND);\n        back.graphics.drawRect(0, 0, width, height);\n        back.graphics.endFill();\n        sepr.graphics.clear();\n        sepr.graphics.lineStyle(1, Style.LABEL_TEXT);\n        for (var i:int=1; i<16; i++) {\n            sepr.graphics.moveTo(divw*i, 1);\n            sepr.graphics.lineTo(divw*i, height-1);\n        }\n        dragPoint = -1;\n        cursorLen = 1;\n    }\n    \n    override public function draw() : void {\n        super.draw();\n        updateCursor();\n        updatePattern();\n    }\n    \n    public function clear() : Array {\n        for (var i:int=0; i<16; i++) pattern[i] = 0;\n        invalidate();\n        return pattern;\n    }\n    \n    protected function updateCursor() : void {\n        cursor.graphics.clear();\n        cursor.graphics.beginFill(Style_POINTER, 0.5);\n        cursor.graphics.drawRect(2, 2, divw * cursorLen-2, height-3);\n        cursor.graphics.endFill();\n    }\n    \n    protected function updatePattern() : void {\n        notes.graphics.clear();\n        notes.graphics.beginFill(Style.BUTTON_FACE);\n        for (var i:int=0; i<16; i++) {\n            if (pattern[i] > 0) notes.graphics.drawRect(i*divw+3, 3, divw*pattern[i]-5, height-6);\n        }\n        notes.graphics.endFill();\n    }\n    \n    protected function onDrag(e:Event) : void {\n        stage.addEventListener(MouseEvent.MOUSE_UP, onDrop);\n        stage.addEventListener(MouseEvent.MOUSE_MOVE, onSlide);\n        back.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);\n        cursor.startDrag(false, new Rectangle(0, 0, width, 0));\n        pointer = mouseX / divw;\n        dragPoint = pointer = (pointer<0) ? 0 : (pointer>15) ? 15 : pointer;\n    }\n    \n    protected function onDrop(e:MouseEvent) : void {\n        stage.removeEventListener(MouseEvent.MOUSE_UP, onDrop);\n        stage.removeEventListener(MouseEvent.MOUSE_MOVE, onSlide);\n        back.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);\n        stopDrag();\n        var ptr:int = getNoteIndex(cursorPos);\n        if (ptr != -1) pattern[ptr] = cursorPos - ptr;\n        for (var i:int=0; i<cursorLen; i++) {\n            if (pattern[cursorPos+i] > cursorLen-i) {\n                pattern[cursorPos+cursorLen] = pattern[cursorPos+i] - cursorLen + i;\n            }\n            pattern[cursorPos+i] = 0;\n        }\n        pattern[cursorPos] = cursorLen;\n        dragPoint = -1;\n        cursorLen = 1;\n        invalidate();\n        if (onUpdate != null) onUpdate();\n    }\n    \n    protected function onMouseMove(e:MouseEvent) : void {\n        pointer = mouseX / divw;\n        cursorPos = pointer = (pointer<0) ? 0 : (pointer>15) ? 15 : pointer;\n        cursor.x = pointer * divw;\n    }\n\n    protected function onSlide(e:MouseEvent) : void {\n        var prevLen:int = cursorLen;\n        pointer = mouseX / divw;\n        cursorPos = pointer = (pointer<0) ? 0 : (pointer>15) ? 15 : pointer;\n        cursorLen = dragPoint - pointer + 1;\n        if (cursorLen <= 0) {\n            cursorLen = -cursorLen + 2;\n            cursorPos = dragPoint;\n        }\n        if (prevLen != cursorLen) updateCursor();\n        cursor.x = cursorPos * divw;\n    }\n    \n    protected function getNoteIndex(pos:int) : int {\n        for (var ptr:int=pos; ptr>=0; ptr--) {\n            if (pattern[ptr] > 0) return (pattern[ptr] > pos - ptr) ? ptr : -1;\n        }\n        return -1;\n    }\n}","modified_date":1443203758,"compile_ok":"1","created_date":1272290700,"forked_count":"66","license":"MIT","swf":"http://swf.wonderfl.net/swf/usercode/4/45/45ce/45ce618d05cf01a9388abb7c231975ee9684d9d7.swf","diff":"0","user":{"icon":"http://wonderfl.net/images/icon/2/27/278a/278afc585a0a283d6e1f13f081cfd9c377ab9db2m","name":"keim_at_Si"},"title":"SiON SoundObject Quartet","id":"9Xx7","favorite_count":"260"},"stat":"ok"}