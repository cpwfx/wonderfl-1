{"code":{"thumbnail":"http://wonderfl.net/images/capture/7/71/7139/71392303d34b641ce53a4768c89007ebe31181c5_100.jpg?t=1317744789","parent":null,"as3":"// Click screen to explode.\npackage {\n    import flash.display.*;\n    import flash.events.*;\n    import flash.geom.*;\n    import frocessing.display.*;\n    import frocessing.color.ColorLerp;\n    import org.si.sion.*;\n    import org.libspark.betweenas3.easing.*;\n    import com.bit101.components.*;\n    \n    [SWF(backgroundColor=\"0\", frameRate=\"60\")]\n    public class ExplosionRender extends F5MovieClip2D {\n    // test\n    //--------------------------------------------------------------------------------\n        public var screen:BitmapData, driver:SiONDriver, data:SiONData;\n        public var exp:Vector.<BitmapData>, frameCounter:int, pt:Point = null;\n        \n        public function setup() : void {\n            screen = new BitmapData(240, 240, false);\n            driver = new SiONDriver();\n            data = driver.compile(\"%2@al2i0@4@ml8i1@1,32@tl8@f40,1,48,24,0,0,80,68s22o2q0g32q8g8\");\n            exp = explosion();\n            with(addChild(new Bitmap(screen))) scaleX = scaleY = 2;\n            new Label(this, 4, 0, \"Click to explode.\");\n            new RadioButton(this,  4, 20, \"60fps\", true,  function(e:Event):void{stage.frameRate = 60;});\n            new RadioButton(this, 49, 20, \"30fps\", false, function(e:Event):void{stage.frameRate = 30;});\n            new RadioButton(this, 94, 20, \"15fps\", false, function(e:Event):void{stage.frameRate = 15;});\n            new InputText(this, 8, 443, loaderInfo.url).setSize(450, 15);\n        }\n\n        public function mouseClicked() : void {\n            pt = new Point(pmouseX*0.5-100, pmouseY*0.5-100);\n            frameCounter = 0;\n            driver.play(data);\n        }\n        \n        public function draw() : void {\n            screen.fillRect(screen.rect, 0);\n            if (pt) {\n                screen.copyPixels(exp[frameCounter], exp[frameCounter].rect, pt);\n                if (++frameCounter==120) pt = null;\n            }\n        }\n        \n        \n        \n        \n    // animations\n    //--------------------------------------------------------------------------------\n        public function explosion(col0:int=0xa0a060, col1:int=0x703010) : Vector.<BitmapData> {\n            var fire:*  = palette([0,0xff000000|col0,0xff000000|col1,0xc0000000|(col1>>1),0], [0,0.05,0.2,0.6,1]);\n            var smoke:* = palette([0,0xff000000,0xff000000,0x00808080], [0,0.1,0.2,1]);\n            var part:*  = palette([0xff808080,0xff000000|col0,0], [0,0.5,1]);\n            var init:*, i:int, r:Number, d:Number;\n            var frame:Vector.<BitmapData> = new Vector.<BitmapData>(120);\n            Particle.initialize();\n            for (i=0; i<frame.length; i++) {\n                Particle.begin(frame[i] = new BitmapData(200, 200, false, 0));\n                if (Particle.counter<=10) {\n                    init = {size:0, x:0, y:0};\n                    r = random(10,30);\n                    d = random(0, 6.28);\n                    Particle.alloc(dust, part, null, {size:100, x:r*cos(d)*2, y:r*sin(d)}, init, random(20,60), Expo.easeOut, 0);\n                }\n                if (Particle.counter<=20) {\n                    init = {size:30, x:random(0,30)-random(0,30), y:random(0,30)-random(0,30)};\n                    Particle.alloc(cloud, fire, \"add\", {rot:random(-0.5,0.5), size:180}, init, random(50,100), Quint.easeOut, 0);\n                    if (Particle.counter&1) {\n                        init = {size:100, x:random(0,50)-random(0,50), y:random(0,50)-random(0,50)};\n                        Particle.alloc(cloud, smoke, null, {y:init.y-20, rot:random(-1,1)}, init, 100, null, 0);\n                    }\n                }\n                Particle.end();\n            }\n            return frame;\n        }\n        \n        \n    // textures\n    //--------------------------------------------------------------------------------\n        public function get cloud() : BitmapData {\n            if (!_cloud) {\n                _cloud = new BitmapData(256, 256, true);\n                _cloud.perlinNoise(64, 64, 4, Math.random()*int.MAX_VALUE, false, true, 7, true);\n                mat.createGradientBox(256, 256, 0, 0, 0);\n                _cloud.draw(radialGradientShape(256, [0xffffff,0x404040, 0], [1,1,1], [0,128,255]), null, null, \"multiply\");\n                _cloud.copyChannel(_cloud, _cloud.rect, _cloud.rect.topLeft, 1, 8);\n                _cloud.colorTransform(_cloud.rect, new ColorTransform(1,1,1,1.5,128,128,128,-16));\n            }\n            return _cloud;\n        }\n        private var _cloud:BitmapData = null;\n        \n        public function get dust() : BitmapData {\n            var i:int;\n            if (!_dust) {\n                _dust = new BitmapData(256, 256, true, 0);\n                radialGradientShape(4, [0xffffff,0xffffff], [1,0], [0,255]);\n                mat.identity();\n                for (i=0; i<8; i++) {\n                    mat.tx = Math.random()*192+28;\n                    mat.ty = Math.random()*192+28;\n                    _dust.draw(shp, mat);\n                }\n            }\n            return _dust;\n        }\n        private var _dust:BitmapData = null;\n        \n        public function get flash() : BitmapData {\n            var n:Number, r:Number;\n            if (!_flash) {\n                _flash = new BitmapData(256, 256, true, 0);\n                for (n=0; n<6.283185307179586; n+=0.002181661564992912) {\n                    r = (1-Math.random() * Math.random()) * 127;\n                    mat.createGradientBox(256-r-r, 256-r-r, 0, r, r);\n                    shp.graphics.clear();\n                    shp.graphics.lineStyle(1);\n                    shp.graphics.lineGradientStyle(GradientType.RADIAL, [0xffffff,0xffffff], [0.5,0], [0,255], mat);\n                    shp.graphics.moveTo(127.5,127.5);\n                    shp.graphics.lineTo(Math.sin(n)*181+127.5, Math.cos(n)*181+127.5);\n                }\n                _flash.draw(shp);\n            }\n            return _flash;\n        }\n        private var _flash:BitmapData = null;\n        \n        \n    // utilities\n    //--------------------------------------------------------------------------------\n        public function palette(col32:Array, ratio:Array, rangeA:Number=1, rangeRGB:Number=1) : * {\n            var a:Vector.<Number> = new Vector.<Number>(256), \n                r:Vector.<Number> = new Vector.<Number>(256), \n                g:Vector.<Number> = new Vector.<Number>(256), \n                b:Vector.<Number> = new Vector.<Number>(256), \n                i:int, c:int, col:uint;\n            for (i=0; i<ratio.length; i++) ratio[i]=int(ratio[i]*256);\n            rangeA /= 255;\n            rangeRGB /= 255;\n            for (c=0, i=0; i<256; i++, c+=(i>=ratio[c+1])) {\n                col = ColorLerp.lerp(col32[c], col32[c+1], (i-ratio[c])/(ratio[c+1]-ratio[c]));\n                a[i] = (col >>> 24) * rangeA;\n                r[i] = ((col >> 16) & 255) * rangeRGB;\n                g[i] = ((col >> 8) & 255) * rangeRGB;\n                b[i] = (col & 255) * rangeRGB;\n            }\n            return {\"a\":a, \"r\":r, \"g\":g, \"b\":b};\n        }\n        \n        public function radialGradientShape(size:Number, color:Array, alpha:Array, ratio:Array) : Shape {\n            mat.createGradientBox(size, size, 0, 0, 0);\n            shp.graphics.clear();\n            shp.graphics.beginGradientFill(GradientType.RADIAL, color, alpha, ratio, mat);\n            shp.graphics.drawRect(0, 0, size, size);\n            shp.graphics.endFill();\n            return shp;\n        }\n        \n        private var shp:Shape = new Shape(), mat:Matrix = new Matrix();\n    }\n}\n\n\n\n\nimport flash.display.*;\nimport flash.geom.*;\nimport org.libspark.betweenas3.easing.*;\nimport org.libspark.betweenas3.tweens.*;\nimport org.libspark.betweenas3.core.easing.*;\nimport org.libspark.betweenas3.core.tweens.*;\n\nclass Particle {\n    static public function initialize() : void {\n        counter = 0;\n    }\n    static public function alloc(tex:BitmapData, pal:*, method:String, to:*=null, from:*=null, life:int=60, easing:IEasing=null, layer:int=0) : Particle {\n        var p:Particle = _freeList.pop() || new Particle();\n        p.texture = tex;\n        p.a = pal.a;\n        p.r = pal.r;\n        p.g = pal.g;\n        p.b = pal.b;\n        p.method = method;\n        p.aging = 1/life;\n        p.age = 0;\n        p.x = (\"x\" in from) ? from.x : 0;\n        p.y = (\"y\" in from) ? from.y : 0;\n        p.size = (\"size\" in from) ? from.size : 256;\n        p.angle = Math.random() * 6.283185307179586;\n        if (\"rot\" in to) {\n            to[\"angle\"] = p.angle + to.rot;\n            delete to.rot;\n        }\n        var t:ITween = $.tween(p, to, from, life, easing, layer);\n        t.onUpdate = p._update;\n        t.onComplete = p._complete;\n        t.play();\n        return p;\n    }\n    static public function begin(screen:BitmapData) : void {\n        _screen = screen;\n    }\n    static public function end() : void {\n        $.update();\n        counter++;\n    }\n    \n    static public var counter:int = 0;\n    static private var _freeList:Vector.<Particle> = new Vector.<Particle>();\n    static private var _screen:BitmapData;\n    public var x:Number, y:Number, angle:Number, size:Number, method:String, aging:Number, age:Number, layer:int;\n    public var texture:BitmapData, a:Vector.<Number>, r:Vector.<Number>, g:Vector.<Number>, b:Vector.<Number>;\n    public var mat:Matrix = new Matrix(), colt:ColorTransform = new ColorTransform();\n    \n    function Particle() {}\n    private function _update() : void {\n        var htxt:Number = texture.width * 0.5,\n            hscr:Number = _screen.width * 0.5, \n            scale:Number = size/texture.width;\n        mat.identity();\n        mat.translate(-htxt, -htxt);\n        mat.rotate(angle);\n        mat.scale(scale, scale);\n        mat.translate(x+hscr, y+hscr);\n        var i:int = age * 255;\n        if (i>255) i=255;\n        colt.redMultiplier = r[i];\n        colt.greenMultiplier = g[i];\n        colt.blueMultiplier = b[i];\n        colt.alphaMultiplier = a[i];\n        _screen.draw(texture, mat, colt, method, null, true);\n        age += aging;\n    }\n    private function _complete() : void { _freeList.push(this); }\n}\n\n\n// Customized betweenAS3. Free but naive ...\n//--------------------------------------------------------------------------------\nimport org.libspark.betweenas3.core.ticker.*;\nimport org.libspark.betweenas3.core.updaters.*;\nimport org.libspark.betweenas3.core.updaters.display.*;\nimport org.libspark.betweenas3.core.updaters.geom.*;\nimport org.libspark.betweenas3.core.utils.*;\n\nclass ControlableTicker implements ITicker {\n    private var _term:TickerListener = new TickerListener();\n    private var _time:Number = 0;\n    function ControlableTicker() { _term.nextListener = _term.prevListener = _term; }\n    public function get time():Number { return _time; }\n    public function addTickerListener(tl:TickerListener) : void {\n        if (tl.nextListener != null || tl.prevListener != null) return;\n        tl.prevListener = _term.prevListener;\n        tl.nextListener = _term;\n        _term.prevListener.nextListener = tl;\n        _term.prevListener = tl;\n    }\n    public function removeTickerListener(tl:TickerListener) : void {\n        tl.prevListener.nextListener = tl.nextListener;\n        tl.nextListener.prevListener = tl.prevListener;\n        tl.prevListener = tl.nextListener = null;\n    }\n    public function start() : void {}\n    public function stop() : void {}\n    public function update(deltaTime:Number) : void {\n        _time += deltaTime;\n        for (var tl:TickerListener = _term.nextListener; tl != _term; tl = tl.nextListener) {\n            if (tl.tick(_time)) {\n                tl.prevListener.nextListener = tl.nextListener;\n                tl.nextListener.prevListener = tl.prevListener;\n                var prev:TickerListener = tl.prevListener;\n                tl.prevListener = tl.nextListener = null;\n                tl = prev;\n            }\n        }\n    }\n} \n\nclass $ {\n    static private var _tickers:Vector.<ControlableTicker> = new Vector.<ControlableTicker>(4);\n    static private var _updaterClassRegistry:ClassRegistry = new ClassRegistry();\n    static private var _updaterFactory:UpdaterFactory = new UpdaterFactory(_updaterClassRegistry);\n    {\n        _tickers[0] = new ControlableTicker();\n        _tickers[1] = new ControlableTicker();\n        _tickers[2] = new ControlableTicker();\n        _tickers[3] = new ControlableTicker();\n        ObjectUpdater.register(_updaterClassRegistry);\n        DisplayObjectUpdater.register(_updaterClassRegistry);\n        MovieClipUpdater.register(_updaterClassRegistry);\n        PointUpdater.register(_updaterClassRegistry);\n    }\n    \n    static public function tween(target:*, to:*, from:*=null, time:Number=1.0, easing:IEasing=null, layer:int=0) : IObjectTween {\n        var tween:ObjectTween = new ObjectTween(_tickers[layer]);\n        tween.updater = _updaterFactory.create(target, to, from);\n        tween.time = time;\n        tween.easing = easing || Linear.easeNone;\n        return tween;\n    }\n    \n    static public function update() : void { \n        for (var i:int=0; i<_tickers.length; i++) _tickers[i].update(1); \n    }\n}\n\n","modified_date":1317744762,"compile_ok":"1","created_date":1264181884,"forked_count":"30","license":"MIT","swf":"http://swf.wonderfl.net/swf/usercode/7/71/7139/71392303d34b641ce53a4768c89007ebe31181c5.swf","diff":"0","user":{"icon":"http://wonderfl.net/images/icon/2/27/278a/278afc585a0a283d6e1f13f081cfd9c377ab9db2m","name":"keim_at_Si"},"title":"Explosion Rendering (SWF素材)","id":"g9Cm","favorite_count":"136"},"stat":"ok"}