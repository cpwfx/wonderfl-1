{"code":{"thumbnail":"http://wonderfl.net/images/capture/8/8f/8f46/8f46608d59b94c39bf42b94a89c1819f9e3bce61_100.jpg?t=1325127118","parent":null,"as3":"package {\n    import flash.display.*;\n    import flash.events.*;\n    import flash.net.*;\n    import flash.system.*;\n    import flash.text.*;\n\n\n    /** Yet Another Wonderfl API */\n    public class YAWA extends Sprite {\n    // constants\n    //--------------------------------------------------\n        public const API_VERSION:String = \"0.16\";\n    \n        // options\n        public const DAYS_1DAY:String      = \"days=1day\";\n        public const DAYS_7DAYS:String     = \"days=7days\";\n        public const DAYS_ALL:String       = \"days=all\";\n        public const DAYS_OPTIONS:Array    = [DAYS_1DAY, DAYS_7DAYS, DAYS_ALL];\n        public const ORDER_PV:String       = \"order=pv\";\n        public const ORDER_FAVORITE:String = \"order=favorite\";\n        public const ORDER_FORKED:String   = \"order=forked\";\n        public const ORDER_OPTIONS:Array   = [ORDER_PV, ORDER_FAVORITE, ORDER_FORKED];\n        public const USER_INFO_ACTIVITY:String = \"\";\n        public const USER_INFO_CODE:String     = \"/codes\";\n        public const USER_INFO_FAVORITE:String = \"/favorites\";\n        public const USER_INFO_FOLLOWER:String = \"/followers\";\n        public const USER_INFO_OPTIONS:Array   = [USER_INFO_ACTIVITY, USER_INFO_CODE, USER_INFO_FAVORITE, USER_INFO_FOLLOWER];\n\n        // access url\n        public const USER_RANKING_URL:String = \"http://wonderfl.net/users\";\n        public const CODE_RANKING_URL:String = \"http://wonderfl.net/codes\";\n        public const TAG_CLOUD_URL:String    = \"http://wonderfl.net/tags\";\n        public const USER_URL:String         = \"http://wonderfl.net/user/\";\n        public const CODE_URL:String         = \"http://wonderfl.net/c/\";\n        public const TAG_URL:String          = \"http://wonderfl.net/tag/\";\n        \n        // wonderfl constant\n        public var USER_INFO_CODE_PAR_PAGE:int = 12;\n        public var CODE_INFO_CODE_PAR_PAGE:int = 8;\n        public var TAG_INFO_CODE_PAR_PAGE:int = 40;\n        \n        // bookmarks of user parser\n        public var PROFILE_START:String        = '<section id=\"sectProfile\"';\n        public var PROFILE_END  :String        = '<!-- / #sectProfile --></section>';\n        public var FOLLOWING_START:String      = '<section id=\"sectFollowing\">';\n        public var FOLLOWING_END  :String      = '<!-- / #sectFollowing --></section>';\n        public var POSTED_CODES_START:String   = '<div class=\"unitCodeGroup';\n        public var POSTED_CODES_END  :String   = '<!-- /.unitCodeGroup --></div>';\n        public var FAVORITE_CODES_START:String = '<div class=\"unitCodeGroup';\n        public var FAVORITE_CODES_END  :String = '<!-- /.unitCodeGroup --></div>';\n        public var FOLLOWERS_START:String      = '<div class=\"follower_box';\n        public var FOLLOWERS_END  :String      = '</div>';        \n        // bookmarks of code parser\n        public var CODE_HEADER_START:String = '<header>';\n        public var CODE_HEADER_END:String   = '</header>';\n        public var RAW_AS3_START:String     = '<textarea id=\"raw_as3\" style=\"display:none;\">';\n        public var RAW_AS3_END:String       = '</textarea>';\n        public var TALK_START:String        = '<div id=\"talk_container\"';\n        public var TALK_END:String          = '<!-- /.groupTalk.group --></div>';\n        public var SWF_START:String         = '<div id=\"swf\">';\n        public var SWF_END:String           = '</div>';\n        public var FAV_START:String         = '<section id=\"sectFavBy\"';\n        public var FAV_END:String           = '<!-- /#sectFavBy --></section>';\n        public var TAG_START:String         = '<ul class=\"listTag group\">';\n        public var TAG_END:String           = '</ul>';\n        public var KEYWORD_START:String     = '<ul class=\"listKeywords group\">';\n        public var KEYWORD_END:String       = '</ul>';\n        public var FORKED_CODE_START:String = '<div id=\"boxForkedCode\"';\n        public var FORKED_CODE_END:String   = '<!-- /#boxForkedCode --></div>';\n        // bookmarks of tag parser\n        public var TAG_LIST_START:String  = '<div class=\"unitCodeGroup';\n        public var TAG_LIST_END:String    = '<!-- /.unitCodeGroup --></div>';\n        public var TAG_COUNT_START:String = '<p class=\"search_meta\">';\n        \n        \n        /** library pathes */\n        static public var libraryPathes:* = {\n            \"com.adobe\"               : \"as3corelib\",\n            \"caurina.transitions\"     : \"tweener\",\n            \"com.greensock\"           : \"tweenmax\",\n            \"com.flashdynamix.motion\" : \"tweensy\",\n            \"org.libspark.betweenas3\" : \"betweenas3\",\n            \"net.kawa.tween\"          : \"ktween\",\n            \"jp.progression\"          : \"progression\",\n            \"org.libspark.thread\"     : \"thread\",\n            \"net.hires.debug\"         : \"stats\",\n            \"org.papervision3d\"       : \"papervision3d\",\n            \"sandy.\"                  : \"sandy3d\",\n            \"alternativa.\"            : \"alternativa3d\",\n            \"away3d.\"                 : \"away3d\",\n            \"net.badimon.five3d\"      : \"five3d\",\n            \"Box2D.\"                  : \"box2d\",\n            \"jiglib.\"                 : \"jiglib\",\n            \"org.libspark.swfassist\"  : \"swfassist\",\n            \"camo.core\"               : \"flashcamouflage\",\n            \"com.bit101.components\"   : \"minimalcomps\",\n            \"net.user1\"               : \"union\",\n            \"org.si.sion\"             : \"sion\",\n            \"idv.cjcat.stardust\"      : \"stardust\",\n            \"funnel.\"                 : \"funnel\",\n            \"com.modestmaps\"          : \"modestmaps\",\n            \"com.google.maps\"         : \"googlemaps\",\n            \"com.afcomponents.umap\"   : \"umap\",\n            \"com.sony.jp.felica\"      : \"felica\",\n            \"org.as3lib.kitchensync\"  : \"kitchensync\",\n            \"com.actionsnippet.qbox\"  : \"quickbox2d\",\n            \"net.wonderfl.score\"      : \"scoreranking\",\n            \"org.libspark.flartoolkit\": \"flartoolkit\",\n            \"com.desuade.motion\"      : \"desuademotion\",\n            \"com.desuade.partigen\"    : \"desuadepartigen\",\n            \"frocessing\"              : \"frocessing\",\n            \"org.flintparticles\"      : \"flint\",\n            \"net.wonderfl.utils\"      : \"wonderflutils\",\n            \"flupie.textanim\"         : \"textanim\",\n            \"de.polygonal\"            : \"polygonal\",\n            \"com.pblabs\"              : \"pushbuttonengine\",\n            \"com.codeazur.as3swf\"     : \"as3swf\",\n            \"ru.inspirit.surf\"        : \"assurf\",\n            \"flash.geom.Bezier\"       : \"bezier\",\n            \"sliz.\"                   : \"miniui\",\n            \"org.libspark.ukiuki\"     : \"ukiuki\",\n            \"idv.cjcat.signals\"       : \"cjsignals\",\n            \"com.useitbetter\"         : \"useitbetteranalytics\",\n            \"com.demonsters.debugger\" : \"monsterdebugger\",\n            \"org.si.cml\"              : \"cannonml\",\n            \"org.flixel\"              : \"flixel\"\n        };\n        /** regular expression for libraries, set null to reconstuct */\n        static public var libraryPathesRegExp:RegExp = null;\n        \n        \n        \n        \n    // variables & properties\n    //--------------------------------------------------\n        /** proxy url */\n        public var proxyURL:String = 'http://www.gmodules.com/ig/proxy?url=';\n        /** proxy domain */\n        public var proxyDomain:String = 'www.gmodules.com';\n        /** api entry in proxy surver */\n        public var apiEntry:* = undefined;\n        /** maximum trial count when error occurs. */\n        public var maxTrialCount:int = 3;\n\n        // suspend while loading api entry\n        private var _suspendList:Array = [];\n        \n        // cache\n        private var _userInfoCache:* = {};\n        private var _codeInfoCache:* = {};\n        private var _tagsInfoCache:* = {};\n        \n        // loaderInfo.url\n        private var loaderInfo_url:String = \"http://swf.wonderfl.net/swf/usercode/8/8f/8f46/8f46608d59b94c39bf42b94a89c1819f9e3bce61.swf\";\n        \n        \n        \n    // constructor\n    //--------------------------------------------------\n        public function YAWA() {\n            var domain:String = new LocalConnection().domain;\n\n            if (domain == proxyDomain) {\n                Security.allowDomain(\"*\");\n                // execute on proxy\n                apiEntry = this;\n                addEventListener(Event.ADDED_TO_STAGE, function (e:Event) : void {\n                    var tf:TextField = new TextField();\n                    tf.width = stage.stageWidth;\n                    tf.text = \"proxy available (ver\" + API_VERSION + \")\";\n                    addChild(tf);\n                });\n            } else {\n                // execute not on proxy\n                var loader:Loader = new Loader();\n                loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(e:Event) : void {\n                    apiEntry = loader.content;\n                    for (var i:int=0; i<_suspendList.length; i++) apiEntry._loadOnProxy(_suspendList[i]);\n                    _suspendList = [];\n                });\n                //loader.load(_proxyRequest(loaderInfo.url));\n                loader.load(_proxyRequest(loaderInfo_url + \"?v=\" + API_VERSION));\n                _suspendList = [];\n                \n                // test\n                if (stage) _test(this);\n            }\n        }\n        \n        \n        \n\n    // interfaces\n    //--------------------------------------------------\n        /** Request to get global user ranking.\n         *  @param responseHandler response handler, requires function(data:*) : void.\n         *  @param days range to search\n         *  @param order ranking order\n         *  @param page page index, 10 users in 1 page\n         *  @return URLLoader to load\n         */\n        public function requestUserRanking(responseHandler:Function, days:String=DAYS_7DAYS, order:String=ORDER_FAVORITE, page:int=1) : URLLoader {\n            return load(getUserRankingURL(days, order, page), responseHandler, userRankingParser, [days, order, page]);\n        }\n\n\n        /** Request to get global code ranking.\n         *  @param responseHandler response handler, requires function(data:*) : void.\n         *  @param days range to search\n         *  @param order ranking order\n         *  @param page page index, 10 codes in 1 page\n         *  @return URLLoader to load\n         */\n        public function requestCodeRanking(responseHandler:Function, days:String=DAYS_7DAYS, order:String=ORDER_FAVORITE, page:int=1) : URLLoader {\n            return load(getCodeRankingURL(days, order, page), responseHandler, codeRankingParser, [days, order, page]);\n        }\n\n\n        /** Request to get tag cloud information.\n         *  @param responseHandler response handler, requires function(data:*) : void.\n         *  @return URLLoader to load\n         */\n        public function requestTagCloud(responseHandler:Function) : URLLoader {\n            return load(getTagCloudURL(), responseHandler, tagCloudParser, null);\n        }\n\n\n        /** Request to get user information.\n         *  @param responseHandler response handler, requires function(data:*) : void.\n         *  @param userID user id\n         *  @param infoType information type\n         *  @param page page index of codes, valid when infoType is USER_INFO_CODES or USER_INFO_FAVORITE, 12 codes par 1 page\n         *  @return URLLoader to load\n         */\n        public function requestUserInfo(responseHandler:Function, userID:String, infoType:String=USER_INFO_CODE, page:int=1) : URLLoader {\n            return load(getUserURL(userID, infoType, page), responseHandler, userParser, [userID, infoType, page]);\n        }\n\n\n        /** Request to get code information.\n         *  @param responseHandler response handler, requires function(data:*) : void.\n         *  @param codeID code id\n         *  @param order order of forked codes (N/A)\n         *  @param page page index of forked codes, 12 codes par 1 page\n         *  @return URLLoader to load\n         */\n        public function requestCodeInfo(responseHandler:Function, codeID:String, order:String=ORDER_FAVORITE, page:int=1) : URLLoader {\n            return load(getCodeURL(codeID, order, page), responseHandler, codeParser, [codeID, order, page]);\n        }\n\n\n        /** Request to get user information.\n         *  @param responseHandler response handler, requires function(data:*) : void.\n         *  @param tag tag string\n         *  @param page page index of codes, 40 codes par 1 page\n         *  @return URLLoader to load\n         */\n        public function requestTagInfo(responseHandler:Function, tag:String, page:int=1) : URLLoader {\n            return load(getTagURL(tag, page), responseHandler, tagParser, [tag, page]);\n        }\n        \n        \n        \n        \n    // cache operations\n    //--------------------------------------------------\n        /** get cached user info */\n        public function getUserInfoCache(userID:String) : * { return _userInfoCache[userID]; }\n        \n        \n        /** get cached code info */\n        public function getCodeInfoCache(codeID:String) : * { return _codeInfoCache[codeID]; }\n        \n        \n        /** get cached tag info */\n        public function getTagsInfoCache(tag:String) : * { return _tagsInfoCache[tag]; }\n        \n        \n        /** clear all cache */\n        public function clearCache() : void {\n            _userInfoCache = {};\n            _codeInfoCache = {};\n            _tagsInfoCache = {};\n        }\n        \n\n\n\n    // url constructor\n    //--------------------------------------------------\n        public function getUserRankingURL(days:String=DAYS_7DAYS, order:String=ORDER_FAVORITE, page:int=1) : String { return USER_RANKING_URL + \"?\" + days + \"&\" + order + \"&page=\" + page.toString(); }\n        public function getCodeRankingURL(days:String=DAYS_7DAYS, order:String=ORDER_FAVORITE, page:int=1) : String { return CODE_RANKING_URL + \"?\" + days + \"&\" + order + \"&page=\" + page.toString(); }\n        public function getTagCloudURL() : String { return TAG_CLOUD_URL + \"?a=0\"; }\n        public function getUserURL(userID:String, infoType:String=USER_INFO_CODE, page:int=1) : String { return USER_URL + userID + infoType + \"?page=\" + page.toString(); }\n        public function getCodeURL(codeID:String, order:String=ORDER_FAVORITE, page:int=1) : String { return CODE_URL + codeID + \"?\" + order + \"&page=\" + page.toString(); }\n        public function getTagURL(tag:String, page:int=1) : String { return TAG_URL + tag + \"?page=\" + page.toString(); }\n        \n        \n        \n        \n    // XHTML parser\n    //--------------------------------------------------\n        /** user ranking parser, args=[days, order, page]; */\n        public function userRankingParser(html:String, args:Array) : * {\n            var list:XMLList = getElementByClass(_cutout(html)..div, \"unitUserRank\"),\n                result:Array = [], i:int, imax:int = list.length(), j:int, jmax:int, elem:XML, codes:XMLList, \n                user:*, propName:String, codeInfo:Array, str:String;\n            result[\"html\"] = html;\n            result.length = imax;\n            switch (args[1]) {\n            case ORDER_PV:       propName = \"codes_count\";     break;\n            case ORDER_FAVORITE: propName = \"favorited_count\"; break;\n            case ORDER_FORKED:   propName = \"forked_count\";    break;\n            }\n            for (i=0; i<imax; i++) {\n                elem = list[i];\n                codes = $class(elem.dl, 'unitRankCode');\n                jmax = codes.length();\n                codeInfo = new Array(jmax);\n                for (j=0; j<jmax; j++) codeInfo[j] = _smallCodeInfo(codes[j].dt.a[0]);\n                user = _smallUserInfo($class(elem.p, \"user\")[0]);\n                user[propName] = getNumber(String($class(elem.ul, \"data\").li.a[0]));\n                result[i] = {\n                    \"rank\"  : int($class(elem.p, 'txtRank')),\n                    \"user\"  : user,\n                    \"codes\" : codeInfo};\n            }\n            return result;\n        }\n        \n        \n        /** code ranking parser, args=[days, order, page]; */\n        public function codeRankingParser(html:String, args:Array) : * {\n            var list:XMLList = getElementByClass(_cutout(html)..div, \"unitRank\"),\n                result:Array = [], code:*, i:int, imax:int = list.length(), elem:XML, data:XMLList;\n            result[\"html\"] = html;\n            result.length = imax;\n            for (i=0; i<imax; i++) {\n                elem = list[i];\n                result[i] = {\n                    \"rank\" : int($class(elem.p, 'txtRank')),\n                    \"user\" : _smallUserInfo($class(elem.p, \"user\")[0]),\n                    \"code\" : _codeInfo(elem)\n                };\n            }\n            return result;\n        }\n        \n        \n        /** tag cloud parser, args=null; */\n        public function tagCloudParser(html:String, args:Array) : * {\n            var list:XMLList = $class(_cutout(html)..ul, \"listTag\").li,\n                result:Array = [], i:int, imax:int = list.length(), elem:XML, count:String;\n            result[\"html\"] = html;\n            for (i=0; i<imax; i++) {\n                elem = list[i].a[0];\n                count = String(elem.span);\n                result[i] = {\n                    \"tag\"   : String(elem.@title),\n                    \"url\"   : \"http://wonderfl.net/tag/\" + encodeURIComponent(elem.@title),\n                    \"count\" : int(count.substring(1,count.length-1))\n                };\n            }\n            return result;\n        }\n        \n        \n        /** user info parser, args=[userID, infoType, page]; */\n        public function userParser(html:String, args:Array) : * {\n            var prof:XML, result:*, elem:XML, basic:XML, data:XMLList, i:int, imax:int, array:Array,\n                userID:String = args[0], codeCount:int, favoritesCount:int;\n            if (!(userID in _userInfoCache)) {\n                prof = _cutout(html, PROFILE_START, PROFILE_END);\n                if (!prof) return {\"error\" : \"Invalid user ID\"};\n                basic = $id(prof.div, 'boxProfBasic')[0];\n                data  = $class($id(prof.div, 'boxProfInfo').ul, 'data')[0].li;\n                codeCount      = getNumber(data[0].a[0] || data[0]);\n                favoritesCount = getNumber(data[2].a[0] || data[2]);\n                _userInfoCache[userID] = {\n                    \"html\" : html,\n                    \"name\" : userID, \n                    \"url\"  : \"http://wonderfl.net/user/\" + userID,\n                    \"icon\" : \"http://wonderfl.net\" + String(basic..img[0].@src),\n                    \"codes_count\": codeCount,\n                    \"forked_count\": getNumber(data[1].a[0] || data[1]),\n                    \"favorites_count\" : favoritesCount,\n                    \"following_count\" : getNumber(data[3].a[0] || data[3]),\n                    \"followers_count\" : getNumber(data[4].a[0] || data[4]),\n                    \"codes_pages\"     : int((codeCount + USER_INFO_CODE_PAR_PAGE - 1) / USER_INFO_CODE_PAR_PAGE),\n                    \"favorites_pages\" : int((favoritesCount + USER_INFO_CODE_PAR_PAGE - 1) / USER_INFO_CODE_PAR_PAGE),\n                    \"external_url\": String(data[5].a[0] || null),\n                    \"description\": String(data[6]).replace(/<.+?>/g,\"\"),\n                    \"cached_codes_count\" : 0,\n                    \"cached_favorites_count\" : 0\n               };\n            }\n            result = _userInfoCache[userID];\n            if (\"current_page\" in result) delete result[\"current_page\"];\n\n            switch(args[1]) {\n            case USER_INFO_ACTIVITY:\n                result = {error:\"USER_INFO_ACTIVITY is not supported currently\"};\n                break;\n            case USER_INFO_FOLLOWER:\n                if (!(\"followers\" in result)) result[\"followers\"] = _getUserInfomations(html, FOLLOWERS_START, FOLLOWERS_END);\n                break;\n            case USER_INFO_CODE:\n                result[\"cached_codes_count\"] += _getCodeInfomations(html, POSTED_CODES_START, POSTED_CODES_END, result, \"codes\", args[2]);\n                result[\"current_page\"] = args[2];\n                break;\n            case USER_INFO_FAVORITE:\n                result[\"cached_favorites_count\"] += _getCodeInfomations(html, FAVORITE_CODES_START, FAVORITE_CODES_END, result, \"favorites\", args[2], true);\n                result[\"current_page\"] = args[2];\n                break;\n            }\n\n            return result;\n        }\n        private function _getUserInfomations(html:String, start:String, end:String) : Array {\n            var xhtml:XML = _cutout(html, start, end);\n            if (!xhtml) return [];\n            var data:XMLList = xhtml.ul.li.span.a, elem:XML; \n            var i:int, imax:int = data.length(), array:Array = new Array(imax);\n            for (i=0; i<imax; i++) {\n                elem = data[i];\n                array[i] = {\n                    \"name\" : String(elem.@title),\n                    \"url\"  : String(elem.@href),\n                    \"icon\" : \"http://wonderfl.net\" + String(elem.img.@src)\n                };\n            }\n            return array;\n        }\n        private function _getCodeInfomations(html:String, start:String, end:String, result:*, prop:String, page:int, withUserInfo:Boolean=false) : int {\n            var data:XMLList = $class(_cutout(html, start, end).div, \"unitCode\"), codeIndex:int, elem:XML, url:String, \n                i:int, imax:int = data.length(), codeList:Array = result[prop] || new Array();\n            codeIndex = (page-1) * USER_INFO_CODE_PAR_PAGE;\n            for (i=0; i<imax; i++, codeIndex++) {\n                elem = data[i];\n                codeList[codeIndex] = _codeInfo(elem);\n                if (withUserInfo) {\n                    elem = $class(elem.p, \"user\")[0];\n                    url = String(elem.a[0].@href);\n                    codeList[codeIndex][\"user\"] = {\n                        \"url\"  : url,\n                        \"name\" : url.substr(url.lastIndexOf(\"/\") + 1),\n                        \"icon\" : \"http://wonderfl.net\" + String(elem..img.@src)\n                    };\n                }\n            }\n            result[prop] = codeList;\n            return imax;\n        }\n        \n        \n        /** code info parser, args=[codeID, order, page]; */\n        public function codeParser(html:String, args:Array) : * {\n            var header:XML, codeID:String = args[0], page:int = args[2], \n                swfCont:XML, tagCont:XML, keyCont:XML, frkCont:XML, forkList:XMLList, forkArray:Array, forkedCount:int, thumbBase:String, date:String, \n                tlkCont:XML, commentList:XMLList, comments:Array, favCont:XML, favUserList:XMLList, favUser:Array, userInfo:*, \n                result:*, divForkedFrom:XML, divHeaderInfo:XML, data:XMLList, parent:* = null, url:String, raw_as3:String = \"\", startIndex:int, endIndex:int,\n                i:int, imax:int, codeIndex:int, userInfoList:XMLList;\n               \n            if (!(codeID in _codeInfoCache)) {\n                header = _cutout(html, CODE_HEADER_START, CODE_HEADER_END);\n                if (!header) return {\"error\" : \"Invalid code ID. [\" + codeID + \"]\"};\n\n                divForkedFrom = $id(header.div, 'boxForked')[0];\n                if (divForkedFrom) {\n                    url = String(divForkedFrom..a[1].@href);\n                    parent = {\"title\"    : String(divForkedFrom..a[1]),\n                              \"url\"      : url,\n                              \"id\"       : url.substr(url.lastIndexOf(\"/\")+1),\n                              \"user\"     : { \"name\":String(divForkedFrom..a[0].@title), \"url\":String(divForkedFrom..a[0].@href) },\n                              \"diff\"     : getNumber(divForkedFrom..a[2])};\n                }\n\n                divHeaderInfo = getElementByClass(header.div, \"headerInfo\")[0];\n                data = divHeaderInfo.ul[0].ul[0].li;\n                startIndex = html.indexOf(RAW_AS3_START);\n                if (startIndex >= 0) {\n                    endIndex = html.indexOf(RAW_AS3_END, startIndex);\n                    if (endIndex >= 0) raw_as3 = html.substring(startIndex+RAW_AS3_START.length, endIndex);\n                }\n                \n                swfCont = _cutout(html, SWF_START, SWF_END);\n                tlkCont = _cutout(html, TALK_START, TALK_END);\n                favCont = _cutout(html, FAV_START, FAV_END);\n                tagCont = _cutout(html, TAG_START, TAG_END);\n                keyCont = _cutout(html, KEYWORD_START, KEYWORD_END);\n\n                comments = [];\n                if (tlkCont) {\n                    commentList = getElementByClass(tlkCont.div, \"unitTalk\");\n                    imax = commentList.length();\n                    for (i=0; i<imax; i++) {\n                        userInfoList = commentList[i].ul[0].li;\n                        comments.push({\"text\" : decodeHtmlEscape(String(commentList[i].p[0]).replace(/<.+?>/g,\"\")),\n                                       \"user\" : {\"name\" : String(userInfoList[0].a[0]),\n                                                 \"url\"  : String(userInfoList[0].a[0].@href),\n                                                 \"icon\" : \"http://wonderfl.net\" + String(userInfoList[0].span[0].a[0].img.@src)},\n                                       \"date\" : String(userInfoList[1]).substr(3)});\n                    }\n                }\n\n                favUser = [];\n                if (favCont) {\n                    favUserList = $class(favCont..div, \"unitFavBy\");\n                    imax = favUserList.length();\n                    for (i=0; i<imax; i++) favUser.push(_smallUserInfo(favUserList[i].span[0]));\n                    favUserList = getElementByClass(favCont.div, \"unitFavUserL\");\n                    imax = favUserList.length();\n                    for (i=0; i<imax; i++) {\n                        userInfo = _smallUserInfo(favUserList[i].p[0].span[0]);\n                        userInfo[\"comment\"] = String(favUserList[i].p[1].text()[0] || \"\");\n                        userInfo[\"tags\"] = _getTagsInFavComment(favUserList[i].p[1].a);\n                        favUser.push(userInfo);\n                    }\n                }\n\n                forkedCount = getNumber(data[0].a[0] || data[0]);\n                thumbBase = _thumbBaseURL(swfCont.img.@src);\n                date = date$;\n                \n                _codeInfoCache[codeID] = {\n                    \"html\"        : html,\n                    \"id\"          : codeID,\n                    \"url\"         : \"http://wonderfl.net/c/\" + codeID,\n                    \"title\"       : String(divHeaderInfo.h1[0]),\n                    \"description\" : String($class(divHeaderInfo.p, \"description\")[0]).replace(/<.+?>/g,\"\"),\n                    \"thumb\"       : thumbBase + \".jpg?t=\" + date,\n                    \"thumb_w\"     : thumbBase + \"_w.jpg?t=\" + date,\n                    \"thumb_100\"   : thumbBase + \"_100.jpg?t=\" + date,\n                    \"user\"        : _smallUserInfo($class(divHeaderInfo.p, \"user\").span[0]),\n                    \"forked_count\"    : forkedCount,\n                    \"favorited_count\" : getNumber(data[1].a[0] || data[1]),\n                    \"lines\"           : getNumber(data[2].a[0] || data[2]),\n                    \"license\"         : String(data[3].a[0]) || getString(data[3]),\n                    \"modified\"        : getString(data[4]),\n                    \"forked_pages\"    : int((forkedCount + CODE_INFO_CODE_PAR_PAGE - 1) / CODE_INFO_CODE_PAR_PAGE),\n                    \"parent\"          : parent,\n                    \"as3\"             : decodeHtmlEscape(raw_as3), \n                    \"comments\"        : comments,\n                    \"favorited\"       : favUser,\n                    \"tags\"            : (tagCont) ? _tagInfo(tagCont.li) : [],\n                    \"keywords\"        : (keyCont) ? _tagInfo(keyCont.li) : [],\n                    \"cached_forked_count\" : 0\n                };\n            }\n            result = _codeInfoCache[codeID];\n\n            if (!(\"forked\" in result)) result[\"forked\"] = [];\n            \n            frkCont = _cutout(html, FORKED_CODE_START, FORKED_CODE_END);\n            if (frkCont) {\n                forkArray = result[\"forked\"];\n                forkList = $class(frkCont.div[0].div, \"unitCode\");\n                imax = forkList.length();\n                codeIndex = (page - 1) * CODE_INFO_CODE_PAR_PAGE;\n                for (i=0; i<imax; i++, codeIndex++) forkArray[codeIndex] = _codeInfo(forkList[i], false);\n                result[\"cached_forked_count\"] += imax;\n            }\n            \n            return result;\n        }\n        private function _getTagsInFavComment(atags:XMLList) : Array {\n            var imax:int=atags.length(), res:Array=new Array(imax), i:int;\n            for (i=0; i<imax; i++) res[i] = String(atags[i]);\n            return res; \n        }\n\n        \n        /** tag info parser, args=[tag, page]; */\n        public function tagParser(html:String, args:Array) : * {\n            var list:XMLList = $class(_cutout(html)..div, \"unitCode\"), \n                tag:String = args[0], page:int = args[1],  \n                i:int, imax:int = list.length(), codeIndex:int, result:*, codes:Array;\n            if (!(tag in _tagsInfoCache)) {\n                var tagCountStart:int = html.indexOf(TAG_COUNT_START);\n                if (tagCountStart == -1) return {\"error\":\"Invalid tag\"};\n                var count:int = int(html.substr(tagCountStart+TAG_COUNT_START.length, 30).match(/\\d+/g)[2]);\n                _tagsInfoCache[tag] = { \"html\"        : html,\n                                        \"tag\"         : tag,\n                                        \"url\"         : \"http://wonderfl.net/tag/\" + encodeURIComponent(tag),\n                                        \"codes_count\" : count,\n                                        \"codes_pages\" : int((count + TAG_INFO_CODE_PAR_PAGE - 1) / TAG_INFO_CODE_PAR_PAGE),\n                                        \"codes\"       : [],\n                                        \"cached_codes_count\" : 0};\n            }\n            result = _tagsInfoCache[tag];\n            codes = result[\"codes\"];\n            codeIndex = (page-1) * TAG_INFO_CODE_PAR_PAGE;\n            for (i=0; i<imax; i++, codeIndex++) codes[codeIndex] = _codeInfo(list[i]);\n            result[\"cached_codes_count\"] += imax;\n            return result;\n        }\n        \n        \n        \n        \n    // html parser sub routines\n    //--------------------------------------------------\n        // small code information\n        private function _smallCodeInfo(atag:XML) : * { \n            var url:String = String(atag.@href),\n                thumbBase:String = _thumbBaseURL(atag.img[0].@src),\n                date:String = date$;\n            return {\"thumb\"     : thumbBase + \".jpg?t=\" + date, \n                    \"thumb_w\"   : thumbBase + \"_w.jpg?t=\" + date, \n                    \"thumb_100\" : thumbBase + \"_100.jpg?t=\" + date, \n                    \"title\" : String(atag.@title),\n                    \"url\"   : url,\n                    \"id\"    : url.substr(url.lastIndexOf(\"/\")+1)};\n        }\n        \n        \n        // code information\n        private function _codeInfo(elem:XML, tag:Boolean=true) : * { \n            var data:XMLList = $class(elem..ul, 'data')[0].li;\n            var code:* = _smallCodeInfo($class(elem..p, 'thumb')[0].a[0]);\n            code[\"pv\"]     = int($class(elem..p, 'pv').a.span[0]);\n            code[\"forked_count\"]    = getNumber(data[0].a[0] || data[0]);\n            code[\"favorited_count\"] = getNumber(data[1].a[0] || data[1]);\n            code[\"lines\"]           = getNumber(data[2].a[0] || data[2]);\n            if (tag) code[\"tags\"] = (data.length() == 4) ? _tagInfo(data[3].ul.li) : [];\n            else     code[\"diff\"] = getNumber(data[2].strong[0].a[0] || data[2].strong[0]);\n            return code;\n        }\n        \n        \n        // small user information\n        private function _smallUserInfo(ue:XML) : * {\n            return {\"name\" : String(ue.a[0].@title), \n                    \"url\"  : String(ue.a[0].@href),\n                    \"icon\" : \"http://wonderfl.net\" + String(ue..img.@src)};\n        }\n        \n        \n        // tag infomation\n        private function _tagInfo(te:XMLList) : Array { \n            var imax:int = te.length(), res:Array = new Array(imax), i:int;\n            for (i=0; i<imax; i++) res[i] = String(te[i].a[0]);\n            return res; \n        }\n        \n        \n        // normalize thumbnail url\n        private function _thumbBaseURL(url:String) : String {\n            return url.replace(/_?(100|w)\\.jpg(\\?t=\\d+)?$/, \"\");\n        }\n        \n        \n        \n        \n    // utilities\n    //--------------------------------------------------\n        /** load over crossdomain policy\n         *  @param url url to load\n         *  @param responseHandler function to deal result, function(data:*) : void\n         *  @param parser function to parse, function(html:String, parserArgs:Array) : *\n         *  @param parserArgs arguments for parser.\n         */\n        public function load(url:String, responseHandler:Function, parser:Function=null, parserArgs:Array=null) : URLLoader {\n            var req:RequestHandler = new RequestHandler(url, responseHandler, _onRequestError, parser, parserArgs);\n            if (apiEntry) return apiEntry._loadOnProxy(req);\n            _suspendList.push(req);\n            return req.loader;\n        }\n        \n                \n        /** add indent to json text */\n        public function jsonIndentor(json:String, tabIndent:int=2) : String { \n            var indent:int = 0, tab:String = \"\", i:int;\n            return json.replace(/[,[\\]{}]/g, function(str:String, idx:int, tgt:String) : String {\n                switch (str) {\n                case \"[\": case \"{\": \n                    indent += tabIndent;\n                    for (tab=\"\", i=0; i<indent; i++) tab += \" \";\n                    break;\n                case \"]\": case \"}\": \n                    indent -= tabIndent;\n                    for (tab=\"\", i=0; i<indent; i++) tab += \" \";\n                    break;\n                }\n                return str + \"\\n\" + tab;\n            });\n        }\n        \n        \n        /** decode HTML escape */\n        public function decodeHtmlEscape(str:String) : String { \n            if (!_htmlEscapeRex) {\n                var keys:Array=[];\n                for (var key:String in _htmlEscapeHash) keys.push(key);\n                _htmlEscapeRex = new RegExp(\"&(\" + keys.join(\"|\") + \";)\", \"g\");\n            }\n            return str.replace(_htmlEscapeRex, function(s:String, c:String, i:int, t:String) : String {\n                return (c in _htmlEscapeHash) ? _htmlEscapeHash[c] : s;\n            });\n        }\n        protected var _htmlEscapeHash:* = { \"nbsp\":\" \", \"lt\":\"<\" , \"gt\":\">\", \"amp\":\"&\", \"quot\":'\"', \"apos\":\"'\" };\n        private   var _htmlEscapeRex:RegExp = null;\n        \n        \n        /** analyze libraries */\n        public function analyzeLibraries(as3code:String) : * {\n            if (!libraryPathesRegExp) {\n                var keys:Array = [];\n                for (var key:String in libraryPathes) keys.push(key.replace(/\\./g, \"\\\\.\"));\n                libraryPathesRegExp = new RegExp(\"^\\\\s*import\\\\s+(\" + keys.join(\"|\") + \")\", \"gm\");\n            }\n            var res:*, libs:* = {};\n            while (res = libraryPathesRegExp.exec(as3code)) libs[libraryPathes[res[1]]] = true;\n            return libs;\n        }\n        \n        \n        /** Unix time String */\n        public function get date$() : String { return String(uint(new Date().time)); }\n        \n        \n        // XHTML operators\n        public function getElementByClass(xhtml:XMLList, className:String) : XMLList { return xhtml.(attribute('class').toString().search(className) != -1); }\n        public function getNumber(str:String) : int { return int(str.match(/\\d+/)[0]); }\n        public function getString(str:String) : String { return /:\\s*(.+)/.exec(str)[1]; }\n        public function $class(xhtml:XMLList, className:String) : XMLList { return xhtml.(attribute('class') == className); }\n        public function $id(xhtml:XMLList, idName:String) : XMLList { return xhtml.(attribute('id') == idName); }\n        \n        \n        \n        \n    // internal use\n    //--------------------------------------------------\n        // convert html to xhtml\n        private function _cutout(html:String, start:String=\"<body\", end:String=\"</body>\") : XML {\n            var startIndex:int = html.indexOf(start);\n            if (startIndex == -1) return null;\n            var endIndex:int = html.indexOf(end, startIndex);\n            if (endIndex == -1) return null;\n            return new XML(html.substring(startIndex, endIndex + end.length));\n        }\n        \n        \n        // Google proxy Copyright wh0 ( http://wonderfl.net/c/gJXA )\n        private function _proxyRequest(url:String) : URLRequest {\n            return new URLRequest(proxyURL + encodeURIComponent(url));\n        }\n        \n        \n        /** @private */\n        public function _loadOnProxy(request:*) : URLLoader {\n            request.loader.load(_proxyRequest(request.url+\"&t=\" + date$));\n            return request.loader;\n        }\n        \n        \n        //\n        private function _onRequestError(request:RequestHandler) : Boolean {\n            if (++request.trialCount == maxTrialCount) return true;\n            apiEntry._loadOnProxy(request);\n            return false;\n        }\n    }\n}\n\n\n\nimport flash.display.*;\nimport flash.events.*;\nimport flash.text.*;\nimport flash.net.URLLoader;\nimport com.bit101.components.*;\n\n\n// request handler\nclass RequestHandler {\n    public var url:String;\n    public var trialCount:int = 0;\n    public var loader:URLLoader = new URLLoader();\n    private var _responseHandler:Function, _errorHandler:Function;\n    private var _parser:Function;\n    private var _parserArgs:Array;\n    function RequestHandler(url:String, responseHandler:Function, errorHandler:Function, parser:Function, parserArgs:Array) {\n        this.url = url;\n        _responseHandler = responseHandler;\n        _errorHandler = errorHandler;\n        _parser = parser || _defaultParser;\n        _parserArgs = parserArgs || [];\n        loader.addEventListener(Event.COMPLETE, onLoaded);\n        loader.addEventListener(IOErrorEvent.IO_ERROR, onError);\n        loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);\n    }\n    public function onLoaded(e:Event) : void {\n        var data:* = _parser(e.target.data, _parserArgs);\n        if (\"error\" in data) _error(data[\"error\"]);\n        else {\n            _responseHandler(data);\n            _removeAllHandlers();\n        }\n    }\n    public function onError(e:ErrorEvent)  : void { _error(e.text); }\n    private function _defaultParser(html:String, args:Array) : * { return html; }\n    private function _error(errorText:String) : void {\n         if (_errorHandler(this)) {\n             _responseHandler({\"error\" : errorText, \"trial_count\" : trialCount});\n             _removeAllHandlers();\n         }\n    }\n    private function _removeAllHandlers() : void {\n        loader.removeEventListener(Event.COMPLETE, onLoaded);\n        loader.removeEventListener(IOErrorEvent.IO_ERROR, onError);\n        loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);\n    }\n}\n\n\n// test\nvar apiIndex:int = 0;\nvar page:InputText;\nvar order:ComboBox;\nvar days:ComboBox;\nvar userID:InputText;\nvar type:ComboBox;\nvar codeID:InputText;\nvar tag:InputText;\nvar showhtml:CheckBox;\nvar getter:PushButton;\n\nfunction _test(api:*) : void {\n    var parent:Sprite = api, \n        tf:TextField, \n        p1:HBox = new HBox(parent, 60, 20), \n        p3:HBox = new HBox(parent, 60, 20), \n        p4:HBox = new HBox(parent, 60, 20),\n        p5:HBox = new HBox(parent, 60, 20);\n    p3.visible = p4.visible = p5.visible = !(p1.visible = true);\n    Component.initStage(parent.stage);\n    tf = new TextField();\n    tf.y = 40;\n    tf.width = parent.stage.stageWidth;\n    tf.height = parent.stage.stageHeight - tf.y;\n    tf.multiline = true;\n    tf.defaultTextFormat = new TextFormat(\"_sans\", 12);\n    \n    tf.text = parent.loaderInfo.url; //parent.proxyURL + encodeURIComponent(parent.loaderInfo.url);\n    parent.addChild(tf);\n\n    _hradio(parent, 0, 0, [\"UserRanking\", \"CodeRanking\", \"TagCloud\", \"UserInfo\", \"CodeInfo\", \"TagInfo\"], \"api\", function(e:Event) : void {\n        switch (apiIndex = e.target.tag) {\n        case 0: \n        case 1: p3.visible = p4.visible = p5.visible = !(p1.visible = true); break;\n        case 2: p3.visible = p4.visible = p5.visible = p1.visible = false;   break;\n        case 3: p1.visible = p4.visible = p5.visible = !(p3.visible = true); break;\n        case 4: p3.visible = p1.visible = p5.visible = !(p4.visible = true); break;\n        case 5: p3.visible = p4.visible = p1.visible = !(p5.visible = true); break;\n        }\n    });\n    new Label(parent, 0, 20, \"page\");\n    page = new InputText(parent, 24, 22, \"1\");\n    page.width = 34;\n    getter = new PushButton(parent, 400, 20, \"getData\", _getData);\n    getter.width = 65;\n    showhtml = new CheckBox(parent, 350, 24, \"html\");\n    showhtml.width = 50;\n    order = new ComboBox(p1, 0, 0, \"ORDER_FAVORITE\");\n    order.items = [\"ORDER_PV\", \"ORDER_FAVORITE\", \"ORDER_FORKED\"];\n    order.selectedIndex = 1;\n    days  = new ComboBox(p1, 0, 0, \"DAYS_7DAYS\");\n    days.items = [\"DAYS_1DAY\", \"DAYS_7DAYS\", \"DAYS_ALL\"];\n    days.selectedIndex = 1;\n    userID = new InputText(p3, 0, 0, parent.loaderInfo.parameters[\"viewer.displayName\"]);\n    type = new ComboBox(p3, 0, 0, \"USER_INFO_ACTIVITY\");\n    type.items = [\"USER_INFO_ACTIVITY\", \"USER_INFO_CODE\", \"USER_INFO_FAVORITE\", \"USER_INFO_FOLLOWER\"];\n    type.selectedIndex = 0;\n    codeID = new InputText(p4, 0, 0, \"krt3\");\n    tag    = new InputText(p5, 0, 0, \"sion\");\n    \n    function _hradio(doc:DisplayObjectContainer, xpos:Number, ypos:Number, labels:Array, groupName:String, selected:Function) : HBox {\n        var hbox:HBox = new HBox(doc, xpos, ypos), i:int, imax:int = labels.length;\n        for (i=0; i<imax; i++) {\n            var rb:RadioButton = new RadioButton(hbox, 0, 0, labels[i], (i==0), selected);\n            rb.groupName = groupName;\n            rb.tag = i;\n        }\n        return hbox;\n    }\n    \n    function _getData(e:Event) : void {\n        var pageIndex:int = int(page.text) || 1;\n        switch (apiIndex) {\n        case 0: api.requestUserRanking(_response, api.DAYS_OPTIONS[days.selectedIndex], api.ORDER_OPTIONS[order.selectedIndex], pageIndex); break;\n        case 1: api.requestCodeRanking(_response, api.DAYS_OPTIONS[days.selectedIndex], api.ORDER_OPTIONS[order.selectedIndex], pageIndex); break;\n        case 2: api.requestTagCloud(_response); break;\n        case 3: api.requestUserInfo(_response, userID.text, api.USER_INFO_OPTIONS[type.selectedIndex], pageIndex); break;\n        case 4: api.requestCodeInfo(_response, codeID.text, api.ORDER_FAVORITE, pageIndex); break;\n        case 5: api.requestTagInfo(_response, tag.text, pageIndex); break;\n        }\n    }\n    \n    function _response(data:*) : void {\n        if (showhtml.selected) tf.text = data.html;\n        else {\n            delete data.html;\n            if (\"as3\" in data) {\n                data[\"library\"] = api.analyzeLibraries(data[\"as3\"]);\n                data[\"as3\"] = \"...snip...\";\n            }\n            tf.text = api.jsonIndentor(JSON.stringify(data));\n        }\n        api.clearCache();\n    }\n}\n","modified_date":1325082708,"compile_ok":"1","created_date":1316686584,"forked_count":"3","license":"MIT","swf":"http://swf.wonderfl.net/swf/usercode/8/8f/8f46/8f46608d59b94c39bf42b94a89c1819f9e3bce61.swf","diff":"0","user":{"icon":"http://wonderfl.net/images/icon/2/27/278a/278afc585a0a283d6e1f13f081cfd9c377ab9db2m","name":"keim_at_Si"},"title":"YAWA - Yet Another Wonderfl API v0.16 (SWF素材)","id":"krt3","favorite_count":"22"},"stat":"ok"}